openapi: 3.1.0
info:
  title: Agora API
  description: >
    ## Public API for interacting with the Agora platform.
    Note: This API is in alpha and subject to change.
  version: 0.0.0-alpha
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://vote.optimism.io/api/v1
    description: Base URL for optimism production
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthToken:
      summary: Token for authentication
      description: >
        A token for authentication and authorization on the Agora platform.
        Subsequent requests should supply this as a Bearer token in the 
        "Authorization" header.
      type: object
      properties:
        access_token:
          summary: The access token
          description: The access token.
          type: string
        token_type:
          summary: Type of the token
          description: >
            The type of the token, either "jwt" or "api_key".
          type: string
        expires_in:
          summary: Expiration time of the token
          description: The time after which the token will expire, in seconds.
          type: integer
    SIWEVerificationBody:
      summary: Body of SIWE /verify request
      description: >
        Body SIWE verification requests containing message and signature per 
        (EIP-4361)[https://eips.ethereum.org/EIPS/eip-4361]
      type: object
      properties:
        message:
          summary: SIWE message for verification
          type: string
        signature:
          summary: SIWE message signature for verification
          type: string
        nonce:
          type: string
    PageMetadata:
      summary: Pagination metadata
      description: Metadata associated with paginated requests.
      type: object
      properties:
        has_next:
          summary: Flag indicating if there's more data for retieval
          description: A boolean flag indicating if there is additional data past the returned page to retrieve.
          type: boolean
        total_returned:
          summary: Total records returned
          description: A number indicating the total amount of records returned for the request.
          type: integer
          format: int32
        next_offset:
          summary: Offset to supply to the next request
          description: A number indicating the offset at which a subsequent request may retrieve the next set of records.
          type: integer
          format: int32
    Delegation:
      summary: A delegation of voting power
      description: A delegation of voting power from one address to another.
      type: object
      properties:
        delegatorAddress:
          summary: Delegator address
          description: Address of the delegator.
          type: string
          examples:
            - summary: Address of the delegator.
              value: "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
        delegateeAddress:
          summary: Delegatee address
          description: Address of the delegatee.
          type: string
          examples:
            - summary: Address of the delegatee.
              value: "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
        totalAllowance:
          summary: Voting allowance for delegate
          description: Total amount of voting power delegated to or from address.
          type: string
          examples:
            - summary: Amount of voting power delegated to or from address.
              value: "100000"
        delegatedOn:
          summary: When delegation occured
          description: The datetime on which the delegation of voting power occurred.
          type: string
          format: date-time
          examples:
            - summary: The datetime on which the delegation of voting power occurred.
        type:
          summary: Type of delegation
          description: The type of delegation; can be advanced or standard.
          type: string
          enum:
            - advanced
            - standard
        amount:
          summary: Amount delegated
          description: The amount of voting power delegated; can be full or partial.
          type: string
          enum:
            - full
            - partial
    BaseDelegate:
      summary: A voting delegate
      description: Data associated with a voting delegate. Sub-resources under this delegate are not expanded.
      type: object
      properties:
        address:
          summary: Delegate address
          description: Address of the delegate.
          type: string
          examples:
            - summary: Address of the delegate.
              value: "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
        votingPower:
          summary: Delegate's available voting power
          description: An object providing a breakdown of a delegate's overall voting power between direct, advanced, and total.
          type: object
          properties:
            advanced:
              description: Advanced voting power.
              type: string
              examples:
                - summary: Advanced voting power.
                  value: "10000"
            direct:
              description: Direct voting power.
              type: string
              examples:
                - summary: Direct voting power
                  value: "20000"
            total:
              description: Total voting power.
              type: string
              examples:
                - summary: Total voting power
                  value: "30000"
        isCitizen:
          description: A boolean flag indicating whether or not this delegate is an Agora citizen.
          type: boolean
        twitter:
          description: Optional twitter handle for a particular delegate.
          type: string
          examples:
            - summary: Twitter handle
              value: "@flip_liquide"
        statement:
          description: A statement from the delegate describing their voting positions.
          type: string
          examples:
            - summary: Delegate statement
              value: "hello! I am a great delegate for reasons xyz"
        topIssues:
          description: The most important issues for a given delegate.
          type: array
          items:
            $ref: "#/components/schemas/Issue"
    Issue:
      summary: Description of a governance issue
      description: An object describing a particular view on a particular governance issue.
      type: object
      properties:
        type:
          type: string
          examples:
            - "Funding"
        value:
          type: string
          examples:
            - "Grant funding should be directed to projects with a great track record"
    SnapshotProposalData:
      summary: Data associated with a snapshot proposal
      description: >
        Metadata and data associated with a snapshot proposal, including start/end/created times, scores, and votes.
      type: object
      properties:
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        title:
          summary: Title of the proposal
          type: string
        startTimestamp:
          summary: Start time of the proposal
          type: string
          format: date-time
        endTimestamp:
          summary: End time of the proposal
          type: string
          format: date-time
        createdTimestamp:
          summary: Creation time of the proposal
          type: string
          format: date-time
        link:
          summary: Link to the proposal
          type: string
        scores:
          summary: Scores for the proposal
          type: array
          items:
            type: string
        votes:
          summary: Votes for the proposal
          type: string
        state:
          summary: State of the proposal
          type: string
          enum:
            - ACTIVE
            - CLOSED
            - PENDING
    StandardProposalData:
      summary: Data associated with standard proposal
      description: >
        Metadata and data associated with a standard proposal, including onchain execution data.
      type: object
      properties:
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        options:
          type: array
          items:
            type: object
            properties:
              executionData:
                $ref: "#/components/schemas/ExecutionData"
    ApprovalProposalData:
      summary: Data associated with an approval proposal
      description: >
        Metadata and data associated with an approval proposal, including onchain execution data.
      type: object
      properties:
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        options:
          type: array
          items:
            type: object
            properties:
              executionData:
                $ref: "#/components/schemas/ExecutionData"
              budgetTokensSpent:
                summary: Budget tokens spent
                type: string
              description:
                summary: Description of the proposal
                type: string
        proposalSettings:
          type: object
          properties:
            maxApprovals:
              summary: Maximum approvals for the proposal
              type: string
            criteria:
              summary: Criteria for the proposal
              type: string
              enum:
                - THRESHOLD
                - TOP_CHOICES
            budgetToken:
              summary: Budget token for the proposal
              type: string
            criteriaValue:
              summary: Criteria value for the proposal
              type: string
            budgetAmount:
              summary: Budget amount for the proposal
              type: string
    OptimisticProposalData:
      summary: Data associated with an optimistic proposal
      description: >
        Metadata and data associated with an optimistic proposal, including onchain execution data.
      type: object
      properties:
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        executionData:
          $ref: "#/components/schemas/ExecutionData"
        description:
          summary: Description of the proposal
          type: string
    ExecutionData:
      summary: Structured exceution data for proposal
      description: >
        Provides the values, targets, calldata, and functions for proposal execution.
      type: object
      properties:
        values:
          summary: Values for execution
          type: array
          items:
            type: string
        targets:
          summary: Targets for execution
          type: array
          items:
            type: string
        calldata:
          summary: Calldata for execution
          type: array
          items:
            type: string
        functionData:
          summary: Functions for execution
          type: array
          items:
            type: object
            properties:
              functionName:
                summary: Function name
                type: string
              data:
                summary: Data for function
                type: array
                items:
                  type: string
    Proposal:
      summary: A specific governance proposal for voting
      description: >
        An object describing the specifics and metadata associated with a particular governance proposal,
        including the specific measure, proposer, data, etc.
      type: object
      properties:
        proposalId:
          type: string
        contractAddress:
          summary: Governor contract address
          description: Governor contract address to which this proposal was submitted.
          type: string
        proposerAddress:
          summary: Proposer's address
          description: The address which submitted the proposal for voting.
          type: string
        description:
          summary: Description of the voting measure
          description: Extended information and context around the proposal.
          type: string
        ordinal:
          summary: Number of this proposal's order
          description: >
            Numeric descriptor of this proposal's ordering among others; Calculated as the concatentation
            of the proposal's block number left-padded by 10 0's, transaction index left-padded by 3 0's, 
            and log index left-padded by 3 0's.
          type: string
        createBlock:
          summary: Proposal creation block number
          description: Block number on which this proposal was created.
          type: string
        startBlock:
          summary: Starting block number
          description: Block number at which this proposal is open for voting.
          type: string
        endBlock:
          summary: Ending block number
          description: Block number at which the proposal has closed for voting.
          type: string
        cancelledBlock:
          summary: Cancelled block number
          description: Block number at which this proposal has been canceled. Zero if not canceled.
          type: string
        executedBlock:
          summary: Execution block number
          description: Block number at which this proposal has been executed. Zero if not executed.
          type: string
        proposalData:
          oneOf:
            - $ref: "#/components/schemas/SnapshotProposalData"
            - $ref: "#/components/schemas/StandardProposalData"
            - $ref: "#/components/schemas/ApprovalProposalData"
            - $ref: "#/components/schemas/OptimisticProposalData"
          discriminator:
            propertyName: votingStrategy
        proposalTemplate:
          $ref: "#/components/schemas/ProposalTemplate"
    ProposalTemplate:
      summary: Metadata about the proposal
      description: >
        An object describing the particular voting parameters of a proposal.
      type: object
      properties:
        name:
          summary: Name of proposal template
          description: Name of proposal template
          type: string
        proposalTemplateId:
          summary: Numeric id of the proposal template
          description: Numeric id of the proposal template
          type: integer
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        # Note: quorum and threshold are strings since I'm not sure about the unit/size here
        # (i.e. if they can be contained in an int32/int64 type)
        quorum:
          summary: Minimmum participation for passage
          description: >
            The minimum number of voting power needed to be involved in a given proposal as a prerequisite for passage
          type: string
        approvalThreshold:
          summary: Amount needed for measure to pass
          description: The amount of voting power needed to pass the given proposal.
          type: string
        contractAddress:
          summary: Governor contract address
          description: Governor contract address to which this proposal was submitted.
          type: string
        createBlock:
          summary: Proposal creation block number
          description: Block number on which this proposal template was created.
          type: string
    VotingStrategy:
      summary: The voting strategy for a proposal
      description: Enum description of the proposal's voting strategy.
      type: string
      enum:
        - STANDARD
        - ADVANCED
        - OPTIMISTIC
        - SNAPSHOT
    VoteSupport:
      summary: Disposition of the vote
      description: Describes which way the vote was cast (i.e. for/against/abstention)
      type: string
      enum:
        - FOR
        - AGAINST
        - ABSTAIN
    Vote:
      summary: Information about a given vote
      description: Information and metadata about a specific vote on a governance proposal.
      type: object
      properties:
        transactionId:
          summary: Transaction ID of the vote
          description: The transaction ID of the transaction in which the vote was cast.
          type: string
        proposalId:
          summary: Proposal ID for the vote
          description: The unique ID of the proposal on which the vote was cast.
          type: string
        voterAddress:
          summary: Address casting the vote
          description: On-chain address of the EOA or contract which cast the vote.
          type: string
        support:
          $ref: "#/components/schemas/VoteSupport"
        weight:
          summary: Voting power behind the vote
          description: Numeric description of the weight and voting power behind the vote.
          type: string
        castBlock:
          summary: Block in which the vote was cast
          description: The block number in which the transaction for the cast is contained.
          type: string
        description:
          summary: Rationale for the vote
          description: A voter-supplied reason for voting the particular way they did.
          type: string
        approvalParams:
          summary: Array of items to submit for approval
          description: An array of items to submit for approval for multiple choice votes.
          type: array
          items:
            type: string
    VotingToken:
      allOf:
        - $ref: "#/components/schemas/Contract"
        - type: object
          properties:
            tokenName:
              summary: Name of the voting token
              description: The name of the voting token.
              type: string
            tokenSymbol:
              summary: Symbol of the voting token
              description: The symbol of the voting token.
              type: string
            totalSupply:
              summary: Total supply of the voting token
              description: The total supply of the voting token.
              type: string
            votableSupply:
              summary: Votable supply of the voting token
              description: The votable supply of the voting token.
              type: string
    Contract:
      summary: Information about a deployed contract
      description: Metadata about a specific smart contract deployed on chain.
      type: object
      properties:
        address:
          summary: Contract address
          description: The address of the contract on chain.
          type: string
        chainId:
          summary: Chain ID of the contract
          description: The chain ID on which the contract is deployed.
          type: string
        deployer:
          summary: Deployer address
          description: The address of the entity which deployed the contract.
          type: string
        creationBlock:
          summary: Block in which the contract was deployed
          description: The block number in which the contract was deployed.
          type: string
        transactionId:
          summary: Transaction ID of the deployment
          description: The transaction ID of the transaction in which the contract was deployed.
          type: string
    Comment:
      summary: A comment
      description: >
        A discussion comment, including the author, timestamp, and content.
      type: object
      properties:
        commentId:
          summary: Comment ID
          description: The unique ID of the comment.
          type: string
        createdAt:
          summary: Timestamp of the comment
          description: The timestamp at which the comment was created.
          type: string
          format: date-time
        updatedAt:
          summary: Timestamp of the comment edit
          description: The timestamp at which the comment was last edited.
          type: string
          format: date-time
        comment:
          summary: Content of the comment
          description: The text content of the comment.
          type: string
        address:
          summary: Author of the comment
          description: The delegate address of the author of the comment.
          type: string
        votesCount:
          summary: Count of votes on the comment
          description: The number of votes on the comment.
          type: integer
        votes:
          type: array
          items:
            $ref: "#/components/schemas/CommentVote"
    CommentVote:
      summary: A vote on a comment
      description: >
        A vote on a comment, including the voter, timestamp, and vote (-1, 0, 1).
      type: object
      properties:
        commentId:
          summary: Comment ID
          description: The unique ID of the comment.
          type: string
        voter:
          summary: Voter address
          description: The address of the voter.
          type: string
        vote:
          summary: Vote value
          description: The value of the vote (-1, 0, 1).
          type: integer
        createdAt:
          summary: Timestamp of the vote
          description: The timestamp at which the comment was created.
          type: string
          format: date-time
        updatedAt:
          summary: Timestamp of the vote update
          description: The timestamp at which the comment was last edited.
          type: string
          format: date-time
    RetroFundingRoundStatus:
      summary: Status of an RetroFunding round
      description: Enum description of the status of an RetroFunding round.
      type: string
      enum:
        - PLANNED
        - SCHEDULED
        - APPLICATIONS_STARTED
        - APPLICATIONS_REVIEW
        - APPLICATIONS_LOCKED
        - VOTING
        - BALLOT_COUNTING
        - RESULTS_ANNOUNCED
        - FUNDS_DISTRIBUTION
        - DONE
        - CANCELLED
    RetroFundingRoundEvent:
      summary: An event within an RetroFunding round
      description: >
        An event within an RetroFunding round, including status and timestamp.
        For example, a round may have events for the start of voting, application review, etc.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/RetroFundingRoundStatus"
        timestamp:
          summary: Timestamp of the event
          description: The timestamp at which the RetroFunding event occurred.
          type: string
          format: date-time
    RetroFundingRound:
      summary: An RetroFunding round
      description: >
        A Retroactive Public Goods Funding round on Agora, including 
        information about the round, and all events within the round.
      type: object
      properties:
        roundId:
          type: integer
        name:
          type: string
        description:
          type: string
        externalLink:
          type: string
        events:
          type: array
          items:
            $ref: "#/components/schemas/RetroFundingRoundEvent"
    RetroFundingImpactMetric:
      # Note: these are externally defined on Open Source Observer,
      # So it's not completely clear what information needs to be represented here
      # The most important aspect are that IDs are present for linking metrics on ballots
      summary: Impact metric for an RetroFunding project
      description: >
        An impact metric for an RetroFunding project with associated metadata.
      type: object
      properties:
        metric_id:
          type: string
        name:
          type: string
        description:
          type: string
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        projectAllocations:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: string
              name:
                type: string
              image:
                type: string
              allocation:
                type: number
        views:
          type: integer
        addedToBallots:
          type: integer
    ProjectMember:
      summary: Member of a RGPF project
      description: >
        A team member on a RetroFunding project.
      type: object
      properties:
        # address:
        #   summary: EOA address of the team member
        #   type: string
        # name:
        #   type: string
        # description:
        #   type: string
        farcasterId:
          summary: Farcaster ID for project team member
          desription: Farcaster ID for project team member.
          type: string
        # externalLink:
        #   type: string
        # avatarUrls:
        #   type: array
        #   items:
        #     type: string
    RetroFundingCategory:
      summary: A category for an RetroFunding project
      description: >
        A category for an RetroFunding project, including information about the category.
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Project:
      summary: A project submitted for RetroFunding
      description: >
        Information about a project submitted for Retroactive Public Goods Funding on Agora.
      type: object
      properties:
        avatarUrl:
          type: string
        coverImageUrl:
          type: string
        attestationUid:
          type: string
        approvalAttestationUid:
          type: string
        name:
          type: string
        description:
          type: string
        externalLink:
          type: string
        socialLinks:
          $ref: "#/components/schemas/SocialLinks"
        team:
          type: array
          items:
            $ref: "#/components/schemas/ProjectMember"
        repositories:
          summary: Repository URLs for the project
          description: >
            URLs for the project's repositories, such as GitHub, GitLab, NPM and other platforms.
          type: array
          items:
            type: string
        deployedContracts:
          summary: Deployed contracts for the project
          description: >
            Information about the contracts deployed by the project, including the contract address, chain ID, deployer, and creation block.
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Contract"
              - type: object
                properties:
                  verificationProof:
                    summary: Proof of contract verification
                    description: Verification of ownership of contract on chain.
                    type: string
                  openSourceObserverSlug:
                    summary: Open source observer verification slug
                    description: >
                      Slug for the open source observer external verification.
                    type: string
        categories:
          type: array
          items:
            $ref: "#/components/schemas/RetroFundingCategory"
        funding:
          type: object
          properties:
            ventureCapital:
              type: array
              items:
                $ref: "#/components/schemas/FundingInfo"
            grants:
              type: array
              items:
                $ref: "#/components/schemas/FundingInfo"
            optimismGrants:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/FundingInfo"
                  - type: object
                    properties:
                      link:
                        type: string
                      type:
                        $ref: "#/components/schemas/OptimismGrantType"
    SocialLinks:
      summary: Social media links for a project
      description: >
        Social media links for a project, including links to Twitter, Discord, and other platforms.
      type: object
      properties:
        twitter:
          type: string
        farcaster:
          type: string
        mirror:
          type: string
        website:
          type: string
    OptimismGrantType:
      summary: Type of Optimism grant
      description: Enum description of the type of Optimism grant.
      type: string
      enum:
        - DEVELOPMENT
        - RESEARCH
        - COMMUNITY
        - ECOSYSTEM
        - OTHER
    FundingInfo:
      summary: Information about funding for a project
      description: >
        Information about funding for a project, including the amount and source.
      type: object
      properties:
        amount:
          type: string
        source:
          type: string
        date:
          type: string
          format: date-time
        details:
          type: string
    RetroFundingBallotMetricsAllocation:
      summary: A vote for an RetroFunding ballot
      description: >
        A vote for an RetroFunding ballot, including information about the vote.
      type: object
      properties:
        metric_id:
          type: integer
        allocation:
          type: string
        locked:
          type: boolean
    RetroFundingBallotProjectsAllocation:
      summary: Projects allocation distribution based on the vote
      description: >
        Projects allocation distribution based on the vote out of total 10M OP
      type: object
      properties:
        project_id:
          type: string
        total_allocation_share:
          type: number
        total_allocation_amount:
          type: number
        allocations_per_metric:
          type: array
          items:
            type: object
            properties:
              metric_id:
                type: string
              allocation_share:
                type: number

    RetroFundingBallot:
      summary: A ballot for an RetroFunding round
      description: >
        A ballot for an RetroFunding round, including information about the ballot.
      type: object
      properties:
        address:
          summary: Address of the voter
          description: Address of the voter
          type: string
        roundId:
          type: integer
        status:
          type: string
          enum:
            - PENDING
            - SUBMITTED
        allocations:
          type: array
          items:
            $ref: "#/components/schemas/RetroFundingBallotMetricsAllocation"
        projects_allocation:
          type: array
          items:
            $ref: "#/components/schemas/RetroFundingBallotProjectsAllocation"
    RetroFundingBallotSubmission:
      summary: Fields required for ballot submission
      description: An object containing the information required to submit a ballot.
      type: object
      properties:
        address:
          summary: Address or ENS of the ballot caster
          description: Address or ENS of the ballot caster.
          type: string
        roundId:
          type: integer
        ballotContent:
          type: object
          properties:
            allocations:
              type: array
              items:
                type: object
                metrciId:
                  type: number
            os_only:
              type: boolean
            os_multiplier:
              type: number
        signature:
          summary: Badgeholder signature of the ballot
          description: >
            Badgeholder's signature of the contents of their ballot.
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
  parameters:
    limitParam:
      name: limit
      in: query
      description: Limits the number of returned results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 10
    offsetParam:
      name: offset
      in: query
      description: Offset from which start returned results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    blockParam:
      # What is a reasonable default?
      name: blockNumber
      in: query
      description: The block number in which requested resources are to be sought.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    supportParam:
      name: support
      in: query
      schema:
        $ref: "#/components/schemas/VoteSupport"
    proposalStatusParam:
      name: status
      in: query
      schema:
        type: string
    roundIdParam:
      name: roundId
      in: path
      description: The round ID of the RetroFunding round to retrieve.
      required: true
      schema:
        type: integer
    ballotIdParam:
      name: ballotCasterAddressOrEns
      in: path
      description: The address or ENS name of the caster of a given ballot to retrieve.
      required: true
      schema:
        type: string
    projectIdParam:
      name: projectId
      in: path
      description: The id of the project on the ballot
      required: true
      schema:
        type: string
    impactMetricParam:
      name: impactMetricId
      in: path
      description: The id of the metric to retrieve
      required: true
      schema:
        type: string
    commentIdParam:
      name: commentId
      in: path
      description: The id of the comment to delete
      required: true
      schema:
        type: string
paths:
  /spec:
    get:
      summary: Gets this specification
      description: Retrieves the full OAS/Swagger spec for the API in YAML.
      operationId: getSpec
      tags:
        - spec
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /auth/nonce:
    get:
      summary: Gets nonce for SIWE authentication
      description: Gets nonce for SIWE authentication.
      operationId: getNonce
      tags:
        - auth
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /auth/verify:
    post:
      summary: Posts SIWE verification payload
      description: Posts SIWE message and signature.
      operationId: postSiweVerificationMessage
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SIWEVerificationBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /delegates:
    get:
      summary: Gets a list of delegates
      description: >
        Retrieves a list of voting delegates on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getDelegates
      tags:
        - delegates
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned delegates will be sorted.
            Supported values are: 'most_delegators', 'weighted_random'
          required: false
          schema:
            type: string
            enum:
              - most_delegators
              - weighted_random
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  delegates:
                    type: array
                    items:
                      $ref: "#/components/schemas/BaseDelegate"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /delegates/{addressOrEnsName}:
    get:
      summary: Gets a specific delegate
      description: >
        Retrieves a specific delegate on Agora by address or ENS name.
      operationId: getDelegateByAddress
      tags:
        - delegates
      parameters:
        - name: addressOrEnsName
          in: path
          description: The address or ENS name of the delegate to retrieve
          required: true
          schema:
            type: string
          examples:
            address:
              value: "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
              summary: Address of the delegate.
            ensName:
              value: "flipliquid.eth"
              summary: ENS name of the delegate.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseDelegate"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /delegates/{addressOrEnsName}/votes:
    get:
      summary: Gets a paginated list of votes for a delegate
      description: >
        Retrieves a paginated list of votes for a specific proposal on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getDelegateVotes
      tags:
        - delegates
        - votes
      parameters:
        - name: addressOrEnsName
          in: path
          description: The address or ENS name of the delegate to retrieve
          required: true
          schema:
            type: string
          examples:
            address:
              value: "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
              summary: Address of the delegate.
            ensName:
              value: "flipliquid.eth"
              summary: ENS name of the delegate.
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned delegates will be sorted.
            Supported values are: 'weight' for descending voting weight, or 'block' for descending block number
          required: false
          schema:
            type: string
            enum:
              - weight
              - block
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  votes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /proposals:
    get:
      summary: Gets a list of proposals
      description: >
        Retrieves a list of voting proposals on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getProposals
      tags:
        - proposals
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned votes will be sorted.
            Supported values are: 'status', 'term'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  proposals:
                    type: array
                    items:
                      $ref: "#/components/schemas/Proposal"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /proposals/{proposalId}:
    get:
      summary: Gets a specific proposal
      description: >
        Retrieves a specific voting proposal on Agora.
      operationId: getProposalById
      tags:
        - proposals
      parameters:
        - name: proposalId
          in: path
          description: The proposal ID of the proposal to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Proposal"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /proposals/{proposalId}/votes:
    get:
      summary: Gets a paginated list of votes for a proposal
      description: >
        Retrieves a paginated list of votes for a specific proposal on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getProposalVotes
      tags:
        - proposals
        - votes
      parameters:
        - name: proposalId
          in: path
          description: The proposal ID of the proposal to retrieve.
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned delegates will be sorted.
            Supported values are: 'weight' for descending voting weight, or 'block' for descending block number
          required: false
          schema:
            type: string
            enum:
              - weight
              - block
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  votes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /delegatees/{addressOrEnsName}:
    get:
      summary: Gets delegatee (delegating from) information for an address
      description: >
        Retrieves a paginated list of the delegatees for a given address. That is, the delegates to which
        the supplied address is delegating votes.
      operationId: getDelegateesByAddress
      tags:
        - delegates
        - delegations
      parameters:
        - name: addressOrEnsName
          in: path
          description: The address or ENS name of the delegate to retrieve
          required: true
          schema:
            type: string
          examples:
            address:
              value: "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
              summary: Address of the delegate.
            ensName:
              value: "flipliquid.eth"
              summary: ENS name of the delegate.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  votes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Delegation"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /delegators/{addressOrEnsName}:
    get:
      summary: Gets delegator (delegating to) information for an address
      description: >
        Retrieves a paginated list of the delegators for a given address. That is, the delegates from which
        the supplied address is being delegated votes.
      operationId: getDelegatorsByAddress
      tags:
        - delegates
        - delegations
      parameters:
        - name: addressOrEnsName
          in: path
          description: The address or ENS name of the delegate to retrieve
          required: true
          schema:
            type: string
          examples:
            address:
              value: "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
              summary: Address of the delegate.
            ensName:
              value: "flipliquid.eth"
              summary: ENS name of the delegate.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  votes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Delegation"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /votes:
    get:
      summary: Gets a paginated list of votes
      description: >
        Retrieves a paginated list of votes on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getVotes
      tags:
        - votes
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned delegates will be sorted.
            Supported values are: 'most_delegators', 'weighted_random'
          required: false
          schema:
            type: string
            enum:
              - most_delegators
              - weighted_random
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  votes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /votes/{transactionId}:
    get:
      summary: Gets a specific vote
      description: >
        Retrieves a specific vote on Agora.
      operationId: getVoteByTransactionId
      tags:
        - votes
      parameters:
        - name: transactionId
          in: path
          description: >
            The transactionId in which the vote was cast
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /proposals/types:
    get:
      summary: Gets a paginated list of proposal types
      description: >
        Retrieves a paginated list of proposal types on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getProposalTypes
      tags:
        - proposals
        - proposalTypes
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned delegates will be sorted.
            Supported values are: 'most_delegators', 'weighted_random'
          required: false
          schema:
            type: string
            enum:
              - most_delegators
              - weighted_random
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  proposalTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProposalTemplate"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /projects:
    # Should this be paginated? How many ballots per round are expected?
    get:
      summary: Gets a list of projects
      description: >
        Retrieves a list of projects on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getProjects
      tags:
        - RetroFunding
        - projects
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /contracts/governor:
    get:
      summary: Gets the governor contract address
      description: >
        Retrieves the address of the governor contract on chain.
      operationId: getGovernorContract
      tags:
        - contracts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contract"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /contracts/alligator:
    get:
      summary: Gets the alligator contract address
      description: >
        Retrieves the address of the alligator contract on chain.
      operationId: getAlligatorContract
      tags:
        - contracts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contract"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /contracts/votingToken:
    get:
      summary: Gets the voting token contract address
      description: >
        Retrieves the address of the voting token contract on chain.
      operationId: getVotingTokenContract
      tags:
        - contracts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VotingToken"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds:
    get:
      summary: Gets a list of RetroFunding rounds
      description: >
        Retrieves a paginated list of RetroFunding rounds, ordered by round ID.
      operationId: getRetroFundingRounds
      tags:
        - RetroFunding
        - RetroFundingRounds
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  ballots:
                    type: array
                    items:
                      $ref: "#/components/schemas/RetroFundingRound"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}:
    get:
      summary: Gets a specific RetroFunding round
      description: >
        Retrieves a specific RetroFunding round on Agora.
      operationId: getRetroFundingRoundById
      tags:
        - RetroFunding
        - RetroFundingRounds
      parameters:
        - name: roundId
          in: path
          description: The round ID of the RetroFunding round to retrieve.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetroFundingRound"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots:
    get:
      summary: Gets a list of ballots for an RetroFunding round
      description: >
        Retrieves a list of ballots for a specific RetroFunding round on Agora as a JSON array.
        Limit, offset parameters can be used to customize the returned list sorted by ballot ordinal.
      operationId: getRetroFundingRoundBallots
      tags:
        - RetroFunding
        - RetroFundingBallots
      parameters:
        - name: roundId
          in: path
          description: The round ID of the RetroFunding round to retrieve.
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  ballots:
                    type: array
                    items:
                      $ref: "#/components/schemas/RetroFundingBallot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{ballotCasterAddressOrEns}:
    get:
      summary: Gets a specific ballot for an RetroFunding round
      description: >
        Retrieves a specific ballot for an RetroFunding round on Agora.
      operationId: getRetroFundingRoundBallotById
      tags:
        - RetroFunding
        - RetroFundingBallots
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/ballotIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetroFundingBallot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{ballotCasterAddressOrEns}/osMultiplier/{osMultiplier}:
    post:
      summary: Updates the OS multiplier for a specific RetroFunding ballot
      description: >
        Updates the OS multiplier for a specific ballot for an RetroFunding round on Agora.
      operationId: updateRetroFundingBallotOSMultiplier
      tags:
        - RetroFunding
        - RetroFundingBallots
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/ballotIdParam"
        - name: osMultiplier
          in: path
          description: The OS multiplier to update the ballot with (1 - 5)
          required: true
          schema:
            type: number
            minimum: 1
            maximum: 5
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{ballotCasterAddressOrEns}/osOnly/{osOnly}:
    post:
      summary: Updates the OS only flag for a specific RetroFunding ballot
      description: >
        Updates the OS only flag for a specific ballot for an RetroFunding round on Agora.
      operationId: updateRetroFundingBallotOSOnly
      tags:
        - RetroFunding
        - RetroFundingBallots
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/ballotIdParam"
        - name: osOnly
          in: path
          description: >
            The OS only flag to set for the ballot.
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{ballotCasterAddressOrEns}/submit:
    post:
      summary: Submits a particular ballot
      description: Submits the content of a ballot to be counted as final for the round.
      operationId: submitRetroFundingBallot
      tags:
        - RetroFunding
        - RetroFundingBallots
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/ballotIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetroFundingBallotSubmission"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetroFundingBallot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/projects:
    get:
      summary: Gets a list of projects for an RetroFunding round
      description: >
        Retrieves a list of projects for a specific RetroFunding round on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getRetroFundingRoundProjects
      tags:
        - RetroFunding
        - projects
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{ballotCasterAddressOrEns}/impactMetrics:
    post:
      summary: Adds or updates an impact metric on a specific RetroFunding ballot
      description: >
        Adds an impact metric or updates an existing impact metric's allocation amount 
        on a specific ballot for an RetroFunding round on Agora.
      operationId: addImpactMetricToRetroFundingBallot
      tags:
        - RetroFunding
        - RetroFundingBallots
        - impactMetrics
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/ballotIdParam"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                metricId:
                  type: string
                allocation:
                  type: number
                locked:
                  type: boolean
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{ballotCasterAddressOrEns}/impactMetrics/{impactMetricId}:
    delete:
      summary: Removes an impact metric from a ballot
      description: >
        Removes an impact metric from a specific ballot for an RetroFunding round on Agora.
      operationId: removeImpactMetricFromRetroFundingBallot
      tags:
        - RetroFunding
        - RetroFundingBallots
        - impactMetrics
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/ballotIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics:
    get:
      summary: Gets impact metrics for a specific RetroFunding round
      description: >
        Retrieves a paginated list of impact metrics for a specific RetroFunding round on Agora.
      operationId: getImpactMetricsOnRetroFundingRound
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  impactMetrics:
                    type: array
                    items:
                      $ref: "#/components/schemas/RetroFundingImpactMetric"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}:
    get:
      summary: Gets a specific impact metric for an RetroFunding round
      description: >
        Retrieves a specific impact metric for a specific RetroFunding round on Agora.
      operationId: getImpactMetricOnRetroFundingRound
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetroFundingImpactMetric"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}/{addressOrEnsName}:
    post:
      summary: Records a view of an impact metric
      description: >
        Records a view of an impact metric by a specific address or ENS name
      operationId: recordImpactMetricView
      tags:
        - RetroFunding
        - RetroFundingImpactMetrics
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - name: addressOrEnsName
          in: path
          description: The address or ENS name of the viewer
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                metric_id:
                  type: string
                address:
                  type: string
                ts:
                  type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}/comments:
    get:
      summary: Gets comments on an impact metric
      description: >
        Gets a paginated list of comments on a particular impact metric. Ordered by creation date.
      operationId: getImpactMetricComments
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned comments will be sorted.
            Supported values are: 'newest', 'votes'
          required: false
          schema:
            type: string
            enum:
              - newest
              - votes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      summary: Creates a comment on an impact metric
      description: >
        Creates a comment on a specific impact metric for a specific round.
        Returns created comment.
      operationId: putImpactMetricComment
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}/comments/{commentId}:
    get:
      summary: Gets a specific comment on an impact metric
      description: >
        Gets a specific comment on a particular impact metric.
      operationId: getImpactMetricComment
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      summary: Updates existing comment
      description: >
        Updates a comment on a specific impact metric for a specific round.
        Returns updated comment.
      operationId: updateImpactMetricComment
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    delete:
      summary: Deletes a comment on an impact metric
      description: >
        Deletes a comment on a specific impact metric for a specific round.
      operationId: deleteImpactMetricComment
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}/comments/{commentId}/votes:
    get:
      summary: Gets all votes for a speciffic comment
      description: >
        Gets all votes for a speciffic comment
      operationId: getImpactMetricCommentVote
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
        - commentsVotes
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommentVote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      summary: Creates or updates vote for a speciffic comment
      description: >
        Creates or updates vote for a speciffic comment.
        Address of the voter is taken from the auth token.
      operationId: putImactMetricCommentVote
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
        - commentsVotes
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentVote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
