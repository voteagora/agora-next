openapi: 3.1.0
info:
  title: Agora's OP API (Beta)
  description: |-
    Welcome to the Collective API documentation. This API provides various endpoints to interact with the Collective platform, focusing on RetroPGF (Retroactive Public Goods Funding) for Optimism. Below is a comprehensive guide to the API endpoints, categorized by functionality.

    ### Current Status
    - **Beta**: This API is currently in beta. Endpoints marked as "Not Live" are under development and available for feedback only.

    ### API Categories
    Live and stable. 
    - **auth**: Authenticate with the Agora API
    - **Round 4**: Data related to Retro Funding for Optimism Round 4
    - **RetroFunding**: Data related to Retro Funding for Optimism Round 4 and beyond
    - **projects**: Data related to RetroPGF Projects
    - **RetroFundingRounds**: Data related to RetroPGF Funding Rounds
    - **RetroFundingBallots**: Data related to RetroPGF Funding Ballots
    - **impactMetrics**: Data related to the Impact Metrics for RetroFunding Round 4
    - **RetroFundingImpactMetrics**: Connect RetroPGF to Impact Metrics
    - **comments**: Data related to RetroPGF Project Comments
    - **commentsVotes**: Data related to RetroPGF Project Comments' Votes
    - **delegates**: Delegates data
    - **delegations**: Delegations data
    - **proposals**: Proposal data
    - **votes**: Vote data
    - **contracts**: Data for the current onchain contracts
    - **projects** Round 5 Projects with mock data
    - **RetroFundingBallots** Round 5 Ballots with mock data

    Not Live.
    - **Round 5**: Data related to Retro Funding for Optimism Round 5
    - 0.2.2: **DistributionStrategies** Round 5 Distribution strategies with mock data
    - 0.2.3: Round 5 Production release with real data

    ### Release Schedule

    | Version  | Status  | Release Date  |
    |----------|---------|---------------|
    | OP 0.1.0 | LIVE   | June 7th |
    | OP 0.1.1 | LIVE   | June 27th |
    | OP 0.1.2 | LIVE   | July 22th |
    | OP 0.1.3 | LIVE   | July 31th |
    |----------|---------|---------------|
    | OP 0.2.0 | LIVE   | Aug 10th |
    | OP 0.2.1 | LIVE   | Aug 26th |
    | OP 0.2.2 | ON TRACK   | Aug 30th |
    | OP 0.2.3 | ON TRACK   | Sep 20th |
  version: 0.2.1
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://vote.optimism.io/api/v1
    description: Base URL for optimism production
tags:
  - name: auth
    description: Authenticate with the Agora API
  - name: Round 5
    description: Data related to Retro Funding for Optimism Round 5
  - name: Round 4
    description: Data related to Retro Funding for Optimism Round 4
  - name: RetroFunding
    description: Data related to Retro Funding for Optimism Round 4 and beyond
  - name: projects
    description: Data related to Retro Projects
  - name: RetroFundingRounds
    description: Data related to Retro Funding Rounds
  - name: RetroFundingBallots
    description: Data related to Retro Funding Ballots
  - name: DistributionStrategies
    description: Data related to Retro Funding Distribution Strategies
  - name: impactMetrics
    description: Data related to the Impact Metrics for RetroFunding Round 4
  - name: RetroFundingImpactMetrics
    description: Connect RetroPGF to Impact Metrics
  - name: comments
    description: Data related to Retro Funding Project Comments
  - name: commentsVotes
    description: Data related to Retro Funding Project Comments' Votes
  - name: delegates
    description: Delegates data
  - name: delegations
    description: Delegations data
  - name: proposals
    description: Proposal data
  - name: votes
    description: Vote data
  - name: contracts
    description: Data for the current onchain contracts
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthToken:
      summary: Token for authentication
      description: >
        A token for authentication and authorization on the Agora platform.
        Subsequent requests should supply this as a Bearer token in the 
        "Authorization" header.
      type: object
      properties:
        access_token:
          summary: The access token
          description: The access token.
          type: string
        token_type:
          summary: Type of the token
          description: >
            The type of the token, either "jwt" or "api_key".
          type: string
        expires_in:
          summary: Expiration time of the token
          description: The time after which the token will expire, in seconds.
          type: integer
    SIWEVerificationBody:
      summary: Body of SIWE /verify request
      description: >
        Body SIWE verification requests containing message and signature per 
        (EIP-4361)[https://eips.ethereum.org/EIPS/eip-4361]
      type: object
      properties:
        message:
          summary: SIWE message for verification
          type: string
        signature:
          summary: SIWE message signature for verification
          type: string
        nonce:
          type: string
    PageMetadata:
      summary: Pagination metadata
      description: Metadata associated with paginated requests.
      type: object
      properties:
        has_next:
          summary: Flag indicating if there's more data for retrieval
          description: A boolean flag indicating if there is additional data past the returned page to retrieve.
          type: boolean
        total_returned:
          summary: Total records returned
          description: A number indicating the total amount of records returned for the request.
          type: integer
          format: int32
        next_offset:
          summary: Offset to supply to the next request
          description: A number indicating the offset at which a subsequent request may retrieve the next set of records.
          type: integer
          format: int32
    Delegation:
      summary: A delegation of voting power
      description: A delegation of voting power from one address to another.
      type: object
      properties:
        from:
          summary: Delegator address
          description: Address of the delegator.
          type: string
          examples:
            - "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
        to:
          summary: Delegatee address
          description: Address of the delegatee.
          type: string
          examples:
            - "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
        allowance:
          summary: Voting allowance for delegate in OP tokens (18 decimals)
          description: Total amount of voting power delegated to or from address.
          type: string
          examples:
            - "100000000000000000000000"
        timestamp:
          summary: When delegation occurred
          description: The datetime on which the delegation of voting power occurred.
          type: string
          format: date-time
          examples:
            - "2024-01-17T19:37:15.983Z"
        type:
          summary: Type of delegation
          description: The type of delegation; can be advanced or direct. Advanced delegations are made through Alligator. Direct delegations are made through OP token.
          type: string
          enum:
            - DIRECT
            - ADVANCED
        amount:
          summary: Amount delegated
          description: The amount of voting power delegated; can be full or partial.
          type: string
          enum:
            - FULL
            - PARTIAL
        transaction_hash:
          summary: Transaction hash of delegation
          description: The transaction hash of the delegation transaction.
          type: string
          examples:
            - "0x8ed595a6f85b2d21e32602094d261034d11706dc100d8f48e11a03c15378cfcf"
    DelegateChunk:
      summary: A chunk of delegate data
      description: Data associated with a voting delegate. Sub-resources under this delegate are not expanded.
      type: object
      properties:
        address:
          summary: Delegate address
          description: Address of the delegate.
          type: string
          examples:
            - "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
        votingPower:
          summary: Delegate's available voting power
          description: An object providing a breakdown of a delegate's overall voting power between direct, advanced, and total.
          type: object
          properties:
            advanced:
              description: Advanced voting power.
              type: string
              examples:
                - "10000"
            direct:
              description: Direct voting power.
              type: string
              examples:
                - "20000"
            total:
              description: Total voting power.
              type: string
              examples:
                - "30000"
        isCitizen:
          description: A boolean flag indicating whether or not this delegate is an Agora citizen.
          type: boolean
        statement:
          $ref: "#/components/schemas/DelegateStatement"
    Delegate:
      summary: A voting delegate
      description: Data associated with a voting delegate. Sub-resources under this delegate are not expanded.
      type: object
      properties:
        address:
          summary: Delegate address
          description: Address of the delegate.
          type: string
          examples:
            - "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
        votingPower:
          summary: Delegate's available voting power
          description: An object providing a breakdown of a delegate's overall voting power between direct, advanced, and total.
          type: object
          properties:
            advanced:
              description: Advanced voting power.
              type: string
              examples:
                - "10000"
            direct:
              description: Direct voting power.
              type: string
              examples:
                - "20000"
            total:
              description: Total voting power.
              type: string
              examples:
                - "30000"
        isCitizen:
          description: A boolean flag indicating whether or not this delegate is an Agora citizen.
          type: boolean
        statement:
          $ref: "#/components/schemas/DelegateStatement"
        votingPowerRelativeToVotableSupply:
          summary: Delegate's voting power relative to votable supply
          description: The delegate's voting power relative to the votable supply.
          type: number
        votingPowerRelativeToQuorum:
          summary: Delegate's voting power relative to quorum
          description: The delegate's voting power relative to the quorum.
          type: number
        proposalsCreated:
          summary: Number of proposals created
          description: The number of proposals created by the delegate.
          type: number
        proposalsVotedOn:
          summary: Number of proposals voted on
          description: The number of proposals voted on by the delegate.
          type: number
        votedFor:
          summary: Number of proposals voted for
          description: The number of proposals voted for by the delegate.
          type: string
        votedAgainst:
          summary: Number of proposals voted against
          description: The number of proposals voted against by the delegate.
          type: string
        votedAbstain:
          summary: Number of proposals abstained from
          description: The number of proposals abstained from by the delegate.
          type: string
        votingParticipation:
          summary: Voting participation
          description: The delegate's voting participation.
          type: string
        lastTenProps:
          summary: Number of proposals voted on out of the last ten
          description: The number of proposals voted on out of the last ten.
          type: string
        numOfDelegators:
          summary: Number of delegators
          description: The number of delegators.
          type: string
    DelegateStatement:
      summary: A delegate's statement
      description: A delegate's statement, including the social links and topIssues.
      type: object
      properties:
        statement:
          summary: Delegate's statement
          description: A statement from the delegate describing their voting positions.
          type: string
        twitter:
          summary: Twitter handle
          description: Twitter handle for the delegate.
          type: string
        discord:
          summary: Discord handle
          description: Discord handle for the delegate.
          type: string
        warpcast:
          summary: Warpcast handle
          description: Warpcast handle for the delegate.
          type: string
        topIssues:
          summary: Top issues for a delegate
          description: The most important issues for a given delegate.
          type: array
          items:
            $ref: "#/components/schemas/Issue"
    Issue:
      summary: Description of a governance issue
      description: An object describing a particular view on a particular governance issue.
      type: object
      properties:
        type:
          type: string
          examples:
            - "Funding"
        value:
          type: string
          examples:
            - "Grant funding should be directed to projects with a great track record"
    SnapshotProposalResults:
      summary: Results of a snapshot proposal
      description: An object describing the results of a snapshot proposal, including status and scores.
      type: object
      properties:
        scores:
          summary: Scores for the proposal
          type: array
          items:
            type: string
        status:
          summary: Status of the proposal
          type: string
          enum:
            - pending
            - active
            - closed
    StandardProposalResults:
      summary: Results of a standard proposal
      description: An object describing the results of a standard proposal.
      type: object
      properties:
        for:
          summary: Number of votes for
          type: string
        against:
          summary: Number of votes against
          type: string
        abstain:
          summary: Number of abstentions
          type: string
    ApprovalProposalResults:
      summary: Results of an approval proposal
      description: An object describing the results of an approval proposal.
      type: object
      properties:
        for:
          summary: Number of votes for
          type: string
        against:
          summary: Number of votes against
          type: string
        abstain:
          summary: Number of abstentions
          type: string
        options:
          type: array
          items:
            type: object
            properties:
              option:
                type: string
              votes:
                type: string
        criteria:
          type: string
          enum:
            - THRESHOLD
            - TOP_CHOICES
        criteriaValue:
          summary: Threshold required to pass or number of top choices that is passed
          type: string
    OptimisticProposalResults:
      summary: Results of an optimistic proposal
      description: An object describing the results of an optimistic proposal.
      type: object
      properties:
        for:
          summary: Number of votes for
          type: string
        against:
          summary: Number of votes against
          type: string
        abstain:
          summary: Number of abstentions
          type: string
    SnapshotProposalData:
      summary: Data associated with a snapshot proposal
      description: >
        Metadata and data associated with a snapshot proposal, including start/end/created times, scores, and votes.
      type: object
      properties:
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        title:
          summary: Title of the proposal
          type: string
        startTimestamp:
          summary: Start time of the proposal
          type: string
          format: date-time
        endTimestamp:
          summary: End time of the proposal
          type: string
          format: date-time
        createdTimestamp:
          summary: Creation time of the proposal
          type: string
          format: date-time
        link:
          summary: Link to the proposal
          type: string
        scores:
          summary: Scores for the proposal
          type: array
          items:
            type: string
        votes:
          summary: Votes for the proposal
          type: string
        state:
          summary: State of the proposal
          type: string
          enum:
            - ACTIVE
            - CLOSED
            - PENDING
    StandardProposalData:
      summary: Data associated with standard proposal
      description: >
        Metadata and data associated with a standard proposal, including onchain execution data.
      type: object
      properties:
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        options:
          type: array
          items:
            type: object
            properties:
              executionData:
                $ref: "#/components/schemas/ExecutionData"
    ApprovalProposalData:
      summary: Data associated with an approval proposal
      description: >
        Metadata and data associated with an approval proposal, including onchain execution data.
      type: object
      properties:
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        options:
          type: array
          items:
            type: object
            properties:
              executionData:
                $ref: "#/components/schemas/ExecutionData"
              budgetTokensSpent:
                summary: Budget tokens spent
                type: string
              description:
                summary: Description of the proposal
                type: string
        proposalSettings:
          type: object
          properties:
            maxApprovals:
              summary: Maximum approvals for the proposal
              type: string
            criteria:
              summary: Criteria for the proposal
              type: string
              enum:
                - THRESHOLD
                - TOP_CHOICES
            budgetToken:
              summary: Budget token for the proposal
              type: string
            criteriaValue:
              summary: Criteria value for the proposal
              type: string
            budgetAmount:
              summary: Budget amount for the proposal
              type: string
    OptimisticProposalData:
      summary: Data associated with an optimistic proposal
      description: >
        Metadata and data associated with an optimistic proposal, including onchain execution data.
      type: object
      properties:
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        executionData:
          $ref: "#/components/schemas/ExecutionData"
        description:
          summary: Description of the proposal
          type: string
    ExecutionData:
      summary: Structured execution data for proposal
      description: >
        Provides the values, targets, calldata, and functions for proposal execution.
      type: object
      properties:
        values:
          summary: Values for execution
          type: array
          items:
            type: string
        targets:
          summary: Targets for execution
          type: array
          items:
            type: string
        signatures:
          summary: Function signatures
          type: array
          items:
            type: string
        calldata:
          summary: Calldata for execution
          type: array
          items:
            type: string
        description:
          summary: Description of the option
          type: string
        functionArgsName:
          summary: Functions for execution
          type: array
          items:
            type: object
            properties:
              functionName:
                summary: Function name
                type: string
              functionArgs:
                summary: Data for function
                type: array
                items:
                  type: string
        budgetTokensSpent:
          summary: Total tokens spent in the option transactions
          type: string
    Proposal:
      summary: A specific governance proposal for voting
      description: >
        An object describing the specifics and metadata associated with a particular governance proposal,
        including the specific measure, proposer, data, etc.
      type: object
      properties:
        id:
          type: string
        proposer:
          summary: Proposer's address
          description: The address which submitted the proposal for voting.
          type: string
        snapshotBlockNumber:
          summary: Block number of the voting power snapshot
          description: Block number of the proposal at which the voting power was calculated
          type: number
        createdTime:
          summary: Proposal creation time
          description: Timestamp on which this proposal was created.
          type: string
        startTime:
          summary: Start time of the proposal
          description: Timestamp at which this proposal is open for voting.
          type: string
        endTime:
          summary: End time of the proposal
          description: Timestamp at which the proposal has closed for voting.
          type: string
        cancelledTime:
          summary: Cancelled time of the proposal
          description: Timestamp at which this proposal has been canceled. Zero if not canceled.
          type: string
        executedTime:
          summary: Execution time of the proposal
          description: Timestamp at which this proposal has been executed. Zero if not executed.
          type: string
        markdowntitle:
          summary: Title of the proposal
          description: Title of the proposal
          type: string
        description:
          summary: Description of the proposal
          description: Extended information and context around the proposal.
          type: string
        quorum:
          summary: Minimum participation for passage
          description: >
            The minimum number of voting power needed to be involved in a given proposal as a prerequisite for passage
          type: string
        approvalThreshold:
          summary: Minimum amount needed for option to pass
          description: The amount of voting power needed to pass an option in the given approval voting proposal.
          type: string
        proposalData:
          oneOf:
            - $ref: "#/components/schemas/SnapshotProposalData"
            - $ref: "#/components/schemas/StandardProposalData"
            - $ref: "#/components/schemas/ApprovalProposalData"
            - $ref: "#/components/schemas/OptimisticProposalData"
          discriminator:
            propertyName: votingStrategy
        unformattedProposalData:
          summary: Unformatted proposal data
          description: >
            The raw, unformatted data associated with the proposal.
          type: string
        proposalResults:
          oneOf:
            - $ref: "#/components/schemas/SnapshotProposalResults"
            - $ref: "#/components/schemas/StandardProposalResults"
            - $ref: "#/components/schemas/ApprovalProposalResults"
            - $ref: "#/components/schemas/OptimisticProposalResults"
        proposalType:
          summary: Type of proposal
          description: The type of proposal; can be standard, approval, optimistic, or snapshot.
          type: string
          enum:
            - STANDARD
            - APPROVAL
            - OPTIMISTIC
            - SNAPSHOT
        status:
          summary: Status of the proposal
          description: The current status of the proposal; can be active, closed, or pending.
          type: string
          enum:
            - "CANCELLED"
            - "SUCCEEDED"
            - "DEFEATED"
            - "ACTIVE"
            - "PENDING"
            - "QUEUED"
            - "EXECUTED"
            - "CLOSED"
        createdTransactionHash:
          summary: Transaction hash of proposal creation
          description: The transaction hash of the transaction which created the proposal.
          type: string
        cancelledTransactionHash:
          summary: Transaction hash of proposal cancellation
          description: The transaction hash of the transaction which canceled the proposal.
          type: string
        executedTransactionHash:
          summary: Transaction hash of proposal execution
          description: The transaction hash of the transaction which executed the proposal.
          type: string
        proposalTemplate:
          $ref: "#/components/schemas/ProposalTemplate"
    ProposalTemplate:
      summary: Metadata about the proposal
      description: >
        An object describing the particular voting parameters of a proposal.
      type: object
      properties:
        name:
          summary: Name of proposal template
          description: Name of proposal template
          type: string
        proposalTemplateId:
          summary: Numeric id of the proposal template
          description: Numeric id of the proposal template
          type: integer
        votingStrategy:
          $ref: "#/components/schemas/VotingStrategy"
        quorum:
          summary: Minimum participation for passage
          description: >
            The minimum number of voting power needed to be involved in a given proposal as a prerequisite for passage
          type: string
        approvalThreshold:
          summary: Amount needed for measure to pass
          description: The amount of voting power needed to pass the given proposal.
          type: string
        contractAddress:
          summary: Governor contract address
          description: Governor contract address to which this proposal was submitted.
          type: string
        createBlock:
          summary: Proposal creation block number
          description: Block number on which this proposal template was created.
          type: string
    VotingStrategy:
      summary: The voting strategy for a proposal
      description: Enum description of the proposal's voting strategy.
      type: string
      enum:
        - STANDARD
        - ADVANCED
        - OPTIMISTIC
        - SNAPSHOT
    VoteSupport:
      summary: Disposition of the vote
      description: Describes which way the vote was cast (i.e. for/against/abstention)
      type: string
      enum:
        - FOR
        - AGAINST
        - ABSTAIN
    Vote:
      summary: Information about a given vote
      description: Information and metadata about a specific vote on a governance proposal.
      type: object
      properties:
        transactionHash:
          summary: Transaction hash of the vote
          description: The transaction hash of the transaction in which the vote was cast.
          type: string
        proposalId:
          summary: Proposal ID for the vote
          description: The unique ID of the proposal on which the vote was cast.
          type: string
        address:
          summary: Address casting the vote
          description: On-chain address of the EOA or contract which cast the vote.
          type: string
        support:
          $ref: "#/components/schemas/VoteSupport"
        reason:
          summary: Reason for the vote
          description: A voter-supplied reason for voting the particular way they did.
          type: string
        weight:
          summary: Voting power behind the vote
          description: Numeric description of the weight and voting power behind the vote.
          type: string
        params:
          summary: Array of votes that have been chosen by the voter
          description: An array of items to submit for approval for multiple choice votes.
          type: array
          items:
            type: string
        proposalValue:
          summary: Value of the proposal
          description: The total value that the proposal will be executed with.
          type: string
        proposalTitle:
          summary: Title of the proposal
          description: The title of the proposal.
          type: string
        proposalType:
          summary: Type of the proposal
          description: The type of the proposal.
          type: string
          enum:
            - STANDARD
            - APPROVAL
            - OPTIMISTIC
            - SNAPSHOT
        timestamp:
          summary: Timestamp of the vote
          description: The timestamp at which the vote was cast.
          type: string
          format: date-time
    VotingToken:
      allOf:
        - $ref: "#/components/schemas/Contract"
        - type: object
          properties:
            totalSupply:
              summary: Total supply of the voting token
              description: The total supply of the voting token.
              type: string
            votableSupply:
              summary: Votable supply of the voting token
              description: The votable supply of the voting token.
              type: string
    Contract:
      summary: Information about a deployed contract
      description: Metadata about a specific smart contract deployed on chain.
      type: object
      properties:
        address:
          summary: Contract address
          description: The address of the contract on chain.
          type: string
        chainId:
          summary: Chain ID of the contract
          description: The chain ID on which the contract is deployed.
          type: string
    Comment:
      summary: A comment
      description: >
        A discussion comment, including the author, timestamp, and content.
      type: object
      properties:
        comment_id:
          summary: Comment ID
          description: The unique ID of the comment.
          type: string
        created_at:
          summary: Timestamp of the comment
          description: The timestamp at which the comment was created.
          type: string
          format: date-time
        updated_at:
          summary: Timestamp of the comment edit
          description: The timestamp at which the comment was last edited.
          type: string
          format: date-time
        comment:
          summary: Content of the comment
          description: The text content of the comment.
          type: string
        address:
          summary: Author of the comment
          description: The delegate address of the author of the comment.
          type: string
        votes_count:
          summary: Count of votes on the comment
          description: The number of votes on the comment.
          type: integer
        votes:
          type: array
          items:
            $ref: "#/components/schemas/CommentVote"
    CommentVote:
      summary: A vote on a comment
      description: >
        A vote on a comment, including the voter, timestamp, and vote (-1, 0, 1).
      type: object
      properties:
        comment_id:
          summary: Comment ID
          description: The unique ID of the comment.
          type: string
        voter:
          summary: Voter address
          description: The address of the voter.
          type: string
        vote:
          summary: Vote value
          description: The value of the vote (-1, 0, 1).
          type: integer
        created_at:
          summary: Timestamp of the vote
          description: The timestamp at which the vote was created.
          type: string
          format: date-time
        updated_at:
          summary: Timestamp of the vote update
          description: The timestamp at which the comment was last edited.
          type: string
          format: date-time
    RetroFundingRoundStatus:
      summary: Status of a RetroFunding round
      description: Enum description of the status of a RetroFunding round.
      type: string
      enum:
        - PLANNED
        - SCHEDULED
        - APPLICATIONS_STARTED
        - APPLICATIONS_REVIEW
        - APPLICATIONS_LOCKED
        - VOTING
        - BALLOT_COUNTING
        - RESULTS_ANNOUNCED
        - FUNDS_DISTRIBUTION
        - DONE
        - CANCELLED
    RetroFundingRoundEvent:
      summary: An event within a RetroFunding round
      description: >
        An event within a RetroFunding round, including status and timestamp.
        For example, a round may have events for the start of voting, application review, etc.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/RetroFundingRoundStatus"
        timestamp:
          summary: Timestamp of the event
          description: The timestamp at which the RetroFunding event occurred.
          type: string
          format: date-time
    RetroFundingRound:
      summary: A RetroFunding round
      description: >
        A Retroactive Public Goods Funding round on Agora, including 
        information about the round, and all events within the round.
      type: object
      properties:
        roundId:
          type: integer
        name:
          type: string
        description:
          type: string
        externalLink:
          type: string
        events:
          type: array
          items:
            $ref: "#/components/schemas/RetroFundingRoundEvent"
    RetroFundingImpactMetric:
      summary: Impact metric for a RetroFunding project
      description: >
        An impact metric for a RetroFunding project with associated metadata.
      type: object
      properties:
        metric_id:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        allocations_per_project:
          type: array
          items:
            type: object
            properties:
              project_id:
                type: string
              name:
                type: string
              image:
                type: string
              allocation:
                type: number
              is_os:
                type: boolean
        views:
          type: integer
        added_to_ballot:
          type: integer
    ProjectMember:
      summary: Member of a RGPF project
      description: >
        A team member on a RetroFunding project.
      type: object
      properties:
        farcasterId:
          summary: Farcaster ID for project team member
          description: Farcaster ID for project team member.
          type: string
    RetroFundingCategory:
      summary: A category for a RetroFunding project
      description: >
        A category for a RetroFunding project, including information about the category.
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Project:
      summary: A project submitted for RetroFunding
      description: >
        Information about a project submitted for Retroactive Public Goods Funding on Agora.
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
        description:
          type: string
        profileAvatarUrl:
          type: string
        projectCoverImageUrl:
          type: string
        socialLinks:
          $ref: "#/components/schemas/SocialLinks"
        team:
          type: array
          items:
            type: string
        github:
          type: array
          items:
            oneOf:
              - type: string
              - type: object
                properties:
                  repo_rank:
                    type: number
                  star_count:
                    type: number
                  starred_events:
                    type: number
                  starred_by_top_devs:
                    type: number
                  fork_count:
                    type: number
                  forked_events:
                    type: number
                  forked_by_top_devs:
                    type: number
                  fulltime_developer_average_6_months:
                    type: number
                  new_contributor_count_6_months:
                    type: number
                  age_of_project_years:
                    type: number
        packages:
          type: array
          items:
            type: string
        links:
          type: array
          items:
            type: string
        organization:
          $ref: "#/components/schemas/Organization"
        contracts:
          summary: Deployed contracts for the project
          description: >
            Information about the contracts deployed by the project, including the contract address, chain ID, deployer, and creation block.
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Contract"
              - type: object
                properties:
                  address:
                    summary: Address of the deployed contract
                    description: The address of the deployed contract.
                    type: string
                  deploymentTxHash:
                    summary: Transaction hash of the deployment
                    description: The transaction hash of the deployment transaction.
                    type: string
                  deployerAddress:
                    summary: Address of the deployer
                    description: The address of the entity which deployed the contract.
                    type: string
                  chainId:
                    summary: Chain ID of the contract
                    description: The chain ID on which the contract was deployed.
                    type: string
        grantsAndFunding:
          type: object
          properties:
            ventureFunding:
              type: array
              items:
                type: object
                properties:
                  amount:
                    type: string
                  year:
                    type: string
                  details:
                    type: string
            grants:
              type: array
              items:
                type: object
                properties:
                  grant:
                    type: string
                  link:
                    type: string
                  amount:
                    type: string
                  date:
                    type: string
                  details:
                    type: string
            revenue:
              type: array
              items:
                type: object
                properties:
                  amount:
                    type: string
                  details:
                    type: string
    SocialLinks:
      summary: Social media links for a project
      description: >
        Social media links for a project, including links to Twitter, Discord, and other platforms.
      type: object
      properties:
        twitter:
          type: string
        farcaster:
          type: string
        mirror:
          type: string
        website:
          type: string
    Organization:
      summary: Organization information for a project
      description: >
        Information about the organization behind a project, including name and avatar.
      type: object
      properties:
        name:
          type: string
        profileAvatarUrl:
          type: string
    RetroFundingBallotMetricsAllocation:
      summary: A vote for a RetroFunding ballot
      description: >
        A vote for a RetroFunding ballot, including information about the vote.
      type: object
      properties:
        metric_id:
          type: integer
        allocation:
          type: string
        locked:
          type: boolean
    RetroFundingBallot4ProjectsAllocation:
      summary: Projects allocation distribution based on the vote
      description: >
        Projects allocation distribution based on the vote out of total 10M OP
      type: object
      properties:
        project_id:
          type: string
        name:
          type: string
        image:
          type: string
        is_os:
          type: boolean
        allocation:
          type: number
        allocations_per_metric:
          type: array
          items:
            type: object
            properties:
              metric_id:
                type: string
              allocation:
                type: number
    RetroFundingBallot5ProjectsAllocation:
      summary: Projects allocation distribution based on the vote
      description: >
        Projects allocation distribution based on the vote out of total 10M OP
      type: object
      properties:
        project_id:
          type: string
        name:
          type: string
        image:
          type: string
        position:
          type: number
        allocation:
          type: number
        impact:
          type: number
          description: >
            The impact of the project on the ecosystem. This is a number between 0 and 5. 
            0 - Conflict of interest.
            1 - Very low impact.
            2 - Low impact.
            3 - Medium impact.
            4 - High impact.
            5 - Very high impact.
    RetroFundingBallotCategoriesAllocation:
      summary: Categories allocation distribution based on the vote
      description: >
        Categories allocation distribution based on the vote out of total 10M OP
      type: object
      properties:
        category_slug:
          type: string
          enum:
            - ETHEREUM_CORE_CONTRIBUTIONS
            - OP_STACK_RESEARCH_AND_DEVELOPMENT
            - OP_STACK_TOOLING
        allocation:
          type: string
        locked:
          type: boolean
    Round4Ballot:
      summary: A ballot for RetroFunding Round 4
      description: >
        A ballot for RetroFunding Round 4, including information about the ballot.
      type: object
      properties:
        address:
          summary: Address of the voter
          description: Address of the voter
          type: string
        round_id:
          type: integer
        status:
          type: string
          enum:
            - PENDING
            - SUBMITTED
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        published_at:
          type: string
          format: date-time
        allocations:
          type: array
          items:
            $ref: "#/components/schemas/RetroFundingBallotMetricsAllocation"
        projects_allocation:
          type: array
          items:
            $ref: "#/components/schemas/RetroFundingBallot4ProjectsAllocation"
    Round5Ballot:
      summary: A ballot for RetroFunding Round 5
      description: >
        A ballot for RetroFunding Round 5, including information about the ballot.
      type: object
      properties:
        address:
          summary: Address of the voter
          description: Address of the voter
          type: string
        round_id:
          type: integer
        status:
          type: string
          enum:
            - NOT STARTED
            - RANKED
            - PENDING SUBMISSION
            - SUBMITTED
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        published_at:
          type: string
          format: date-time
        category_allocations:
          type: array
          items:
            $ref: "#/components/schemas/RetroFundingBallotCategoriesAllocation"
        projects_allocations:
          type: array
          items:
            $ref: "#/components/schemas/RetroFundingBallot5ProjectsAllocation"
        projects_to_be_evaluated:
          description: >
            Projects that haven't been evaluated by the voter. This is a list of project IDs.
          type: array
          items:
            type: string
        total_projects:
          description: >
            Total number of projects that the voter has to evaluate. This is the length of the projects_to_be_evaluated array.
          type: integer
        distribution_method:
          type: string
    RetroFunding4BallotSubmission:
      summary: Fields required for ballot submission
      description: An object containing the information required to submit a ballot.
      type: object
      properties:
        address:
          summary: Address or ENS of the ballot caster
          description: Address or ENS of the ballot caster.
          type: string
        ballot_content:
          type: object
          properties:
            allocations:
              type: array
              items:
                type: object
                metricId:
                  type: number
            os_only:
              type: boolean
            os_multiplier:
              type: number
        signature:
          summary: Badgeholder signature of the ballot
          description: >
            Badgeholder's signature of the contents of their ballot.
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
    RetroFunding5BallotSubmission:
      summary: Fields required for ballot submission
      description: An object containing the information required to submit a ballot.
      type: object
      properties:
        address:
          summary: Address or ENS of the ballot caster
          description: Address or ENS of the ballot caster.
          type: string
        ballot_content:
          type: object
          properties:
            category_allocation:
              type: array
              items:
                type: object
                categoryId:
                  type: string
            projects_allocation:
              type: array
              items:
                type: object
                projectId:
                  type: string
        signature:
          summary: Badgeholder signature of the ballot
          description: >
            Badgeholder's signature of the contents of their ballot.
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
  parameters:
    addressOrEnsName:
      name: addressOrEnsName
      in: path
      description: The address or ENS name of the delegate to retrieve
      required: true
      schema:
        type: string
      examples:
        address:
          value: "0xDa6d1F091B672C0f9e215eB9fa6B5a84bF2c5e11"
          summary: Address of the delegate.
        ensName:
          value: "flipliquid.eth"
          summary: ENS name of the delegate.
    limitParam:
      name: limit
      in: query
      description: Limits the number of returned results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 10
    offsetParam:
      name: offset
      in: query
      description: Offset from which start returned results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    blockParam:
      name: blockNumber
      in: query
      description: The block number in which requested resources are to be sought.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    supportParam:
      name: support
      in: query
      schema:
        $ref: "#/components/schemas/VoteSupport"
    proposalStatusParam:
      name: status
      in: query
      schema:
        type: string
    roundIdParam:
      name: roundId
      in: path
      description: The round ID of the RetroFunding round to retrieve.
      required: true
      schema:
        type: integer
    categoryIdParam:
      name: categoryId
      in: path
      description: The category ID of the RetroFunding category to retrieve.
      required: true
      schema:
        type: string
    projectIdParam:
      name: projectId
      in: path
      description: The id of the project on the ballot
      required: true
      schema:
        type: string
    impactMetricParam:
      name: impactMetricId
      in: path
      description: The id of the metric to retrieve
      required: true
      schema:
        type: string
    commentIdParam:
      name: commentId
      in: path
      description: The id of the comment to delete
      required: true
      schema:
        type: string
    allocationParam:
      name: allocation
      in: path
      description: The allocation to be set in percentage
      required: true
      schema:
        type: string
    impactParam:
      name: impact
      in: path
      description: The impact of the project on the ecosystem
      required: true
      schema:
        type: number
        minimum: 0
        maximum: 5
    positionParam:
      name: position
      in: path
      description: The position of the project on the ballot
      required: true
      schema:
        type: number
paths:
  /spec:
    get:
      summary: Gets this specification
      description: Retrieves the full OAS/Swagger spec for the API in YAML.
      operationId: getSpec
      tags:
        - spec
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /auth/nonce:
    get:
      summary: Gets nonce for SIWE authentication
      description: Gets nonce for SIWE authentication.
      operationId: getNonce
      tags:
        - auth
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /auth/verify:
    post:
      summary: Posts SIWE verification payload
      description: Posts SIWE message and signature.
      operationId: postSiweVerificationMessage
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SIWEVerificationBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /delegates:
    get:
      summary: Gets a list of delegates
      description: >
        Retrieves a list of voting delegates on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getDelegates
      tags:
        - delegates
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned delegates will be sorted.
            Supported values are: 'voting_power', 'most_delegators', 'weighted_random'
          required: false
          schema:
            type: string
            enum:
              - most_delegators
              - weighted_random
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DelegateChunk"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /delegates/{addressOrEnsName}:
    get:
      summary: Gets a specific delegate
      description: >
        Retrieves a specific delegate on Agora by address or ENS name.
      operationId: getDelegateByAddress
      tags:
        - delegates
      parameters:
        - $ref: "#/components/parameters/addressOrEnsName"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Delegate"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /delegates/{addressOrEnsName}/votes:
    get:
      summary: Gets a paginated list of votes for a delegate
      description: >
        Retrieves a paginated list of votes for a specific proposal on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getDelegateVotes
      tags:
        - votes
        - delegates
      parameters:
        - $ref: "#/components/parameters/addressOrEnsName"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  votes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /proposals:
    get:
      summary: Gets a list of proposals
      description: >
        Retrieves a list of voting proposals on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getProposals
      tags:
        - proposals
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: filter
          in: query
          description: >
            The desired method by which returned votes will be filtered.
            Supported values are: 'relevant', 'everything'
          required: false
          schema:
            type: string
            enum:
              - relevant
              - everything
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  proposals:
                    type: array
                    items:
                      $ref: "#/components/schemas/Proposal"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /proposals/{proposalId}:
    get:
      summary: Gets a specific proposal
      description: >
        Retrieves a specific voting proposal on Agora.
      operationId: getProposalById
      tags:
        - proposals
      parameters:
        - name: proposalId
          in: path
          description: The proposal ID of the proposal to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Proposal"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /proposals/{proposalId}/votes:
    get:
      summary: Gets a paginated list of votes for a proposal
      description: >
        Retrieves a paginated list of votes for a specific proposal on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getProposalVotes
      tags:
        - proposals
        - votes
      parameters:
        - name: proposalId
          in: path
          description: The proposal ID of the proposal to retrieve.
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned delegates will be sorted.
            Supported values are: 'weight' for descending voting weight, or 'block' for descending block number
          required: false
          schema:
            type: string
            enum:
              - weight
              - block_number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  votes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /delegates/{addressOrEnsName}/delegatees:
    get:
      summary: Gets delegatees (delegating to) information for an address
      description: >
        Retrieves a list of the delegatees for a given address. That is, the delegates to which
        the supplied address is delegating votes.
      operationId: getDelegateesByAddress
      tags:
        - delegates
        - delegations
      parameters:
        - $ref: "#/components/parameters/addressOrEnsName"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Delegation"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /delegates/{addressOrEnsName}/delegators:
    get:
      summary: Gets delegator (delegating to) information for an address
      description: >
        Retrieves a paginated list of the delegators for a given address. That is, the delegates from which
        the supplied address is being delegated votes.
      operationId: getDelegatorsByAddress
      tags:
        - delegates
        - delegations
      parameters:
        - $ref: "#/components/parameters/addressOrEnsName"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  votes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Delegation"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /contracts/governor:
    get:
      summary: Gets the governor contract address
      description: >
        Retrieves the address of the governor contract on chain.
      operationId: getGovernorContract
      tags:
        - contracts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contract"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /contracts/alligator:
    get:
      summary: Gets the alligator contract address
      description: >
        Retrieves the address of the alligator contract on chain.
      operationId: getAlligatorContract
      tags:
        - contracts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contract"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /contracts/token:
    get:
      summary: Gets the voting token contract address
      description: >
        Retrieves the address of the voting token contract on chain.
      operationId: getVotingTokenContract
      tags:
        - contracts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VotingToken"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /projects:
    get:
      summary: Gets a list of projects
      description: >
        Retrieves a list of projects on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getProjects
      tags:
        - RetroFunding
        - projects
        - Round 4
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds:
    get:
      summary: Gets a list of RetroFunding rounds
      description: >
        Retrieves a paginated list of RetroFunding rounds, ordered by round ID.
      operationId: getRetroFundingRounds
      tags:
        - RetroFunding
        - RetroFundingRounds
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  rounds:
                    type: array
                    items:
                      $ref: "#/components/schemas/RetroFundingRound"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}:
    get:
      summary: Gets a specific RetroFunding round
      description: >
        Retrieves a specific RetroFunding round on Agora.
      operationId: getRetroFundingRoundById
      tags:
        - RetroFunding
        - RetroFundingRounds
      parameters:
        - name: roundId
          in: path
          description: The round ID of the RetroFunding round to retrieve.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetroFundingRound"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots:
    get:
      summary: Gets a list of ballots for an RetroFunding round
      description: >
        Retrieves a list of ballots for a specific RetroFunding round on Agora as a JSON array.
        Limit, offset parameters can be used to customize the returned list sorted by ballot ordinal.
      operationId: getRetroFundingRoundBallots
      tags:
        - RetroFunding
        - RetroFundingBallots
        - Round 4
      parameters:
        - name: roundId
          in: path
          description: The round ID of the RetroFunding round to retrieve.
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  ballots:
                    type: array
                    items:
                      oneOf:
                        - $ref: "#/components/schemas/Round4Ballot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}:
    get:
      summary: Gets a specific ballot for an RetroFunding round
      description: >
        Retrieves a specific ballot for an RetroFunding round on Agora.
      operationId: getRetroFundingRoundBallotById
      tags:
        - RetroFunding
        - RetroFundingBallots
        - Round 4
        - Round 5
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Round5Ballot"
                  - $ref: "#/components/schemas/Round4Ballot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}/osOnly/{osOnly}:
    post:
      summary: Updates the OS only flag for a specific RetroFunding ballot
      description: >
        Updates the OS only flag for a specific ballot for an RetroFunding round on Agora.
      operationId: updateRetroFundingBallotOSOnly
      tags:
        - RetroFunding
        - RetroFundingBallots
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
        - name: osOnly
          in: path
          description: >
            The OS only flag to set for the ballot.
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Round4Ballot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}/submit:
    post:
      summary: Submits a particular ballot
      description: Submits the content of a ballot to be counted as final for the round.
      operationId: submitRetroFundingBallot
      tags:
        - RetroFunding
        - RetroFundingBallots
        - Round 4
        - Round 5
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/RetroFunding4BallotSubmission"
                - $ref: "#/components/schemas/RetroFunding5BallotSubmission"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                  round:
                    type: number
                  signature:
                    type: string
                  payload:
                    type: string
                  created_at:
                    type: string
                  updated_at:
                    type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/projects:
    get:
      summary: Gets a list of projects for an RetroFunding round
      description: >
        Retrieves a list of projects for a specific RetroFunding round on Agora as a JSON array.
        Limit, offset, and sort parameters can be used to customize the returned list.
      operationId: getRetroFundingRoundProjects
      tags:
        - RetroFunding
        - projects
        - Round 4
        - Round 5
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: category
          in: query
          description: >
            The desired method by which returned votes will be filtered.
            Supported values are: 'all', 'eth_core', "op_tooling", "op_rnd"
          required: false
          schema:
            type: string
            enum:
              - all
              - eth_core
              - op_tooling
              - op_rnd
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/projects/{projectId}:
    get:
      summary: Gets a specific project for an RetroFunding round
      description: >
        Retrieves a specific project for a specific RetroFunding round on Agora.
      operationId: getRetroFundingRoundProjectById
      tags:
        - RetroFunding
        - projects
        - Round 4
        - Round 5
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/projectIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}/impactMetrics:
    post:
      summary: Adds or updates an impact metric on a specific RetroFunding ballot
      description: >
        Adds an impact metric or updates an existing impact metric's allocation amount 
        on a specific ballot for an RetroFunding round on Agora.
      operationId: addImpactMetricToRetroFundingBallot
      tags:
        - RetroFunding
        - RetroFundingBallots
        - impactMetrics
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                metric_id:
                  type: string
                allocation:
                  type: number
                locked:
                  type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Round4Ballot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}/projects/{projectId}/allocation/{allocation}:
    post:
      summary: Updates allocation for a specific project for a RetroFunding round
      description: >
        Updates a specific project for a specific RetroFunding round on Agora.
        Allocation is a percentage of total allocation for the round.
      operationId: updateRetroFundingRoundProjectAllocation
      tags:
        - RetroFunding
        - projects
        - Round 5
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/projectIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
        - $ref: "#/components/parameters/allocationParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Round5Ballot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}/projects/{projectId}/impact/{impact}:
    post:
      summary: Updates impact for a specific project for a RetroFunding round
      description: >
        Updates a specific project for a specific RetroFunding round on Agora.
        Impact is a number from 0 to 5.
        0 - Conflict of Interest
        1 - Very Low
        2 - Low
        3 - Medium
        4 - High
        5 - Very High
      operationId: updateRetroFundingRoundProjectImpact
      tags:
        - RetroFunding
        - projects
        - Round 5
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/projectIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
        - $ref: "#/components/parameters/impactParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Round5Ballot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}/projects/{projectId}/position/{position}:
    post:
      summary: Updates position for a specific project for a RetroFunding round
      description: >
        Updates a specific project for a specific RetroFunding round on Agora.
        Postion is an integer of the project's rank.
      operationId: updateRetroFundingRoundProjectPosition
      tags:
        - RetroFunding
        - projects
        - Round 5
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/projectIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
        - $ref: "#/components/parameters/positionParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Round5Ballot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}/categories:
    post:
      summary: Updates a category allocation for a specific RetroFunding ballot
      description: >
        Updates a category allocation and lock status for a specific ballot for a RetroFunding round on Agora.
      operationId: updateRetroFundingRoundCategoryAllocation
      tags:
        - RetroFunding
        - projects
        - Round 5
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category_slug:
                  type: string
                  enum:
                    - ETHEREUM_CORE_CONTRIBUTIONS
                    - OP_STACK_RESEARCH_AND_DEVELOPMENT
                    - OP_STACK_TOOLING
                allocation:
                  type: string
                locked:
                  type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Round5Ballot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}/distribution_method:
    post:
      summary: Updates the distribution method for a specific RetroFunding ballot
      description: >
        Updates the distribution method for a specific ballot for a RetroFunding round on Agora.
      operationId: updateRetroFundingBallotDistributionMethod
      tags:
        - RetroFunding
        - projects
        - Round 5
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                distribution_method:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Round5Ballot"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/ballots/{addressOrEnsName}/impactMetrics/{impactMetricId}:
    delete:
      summary: Removes an impact metric from a ballot
      description: >
        Removes an impact metric from a specific ballot for a RetroFunding round on Agora.
      operationId: removeImpactMetricFromRetroFundingBallot
      tags:
        - RetroFunding
        - RetroFundingBallots
        - impactMetrics
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/addressOrEnsName"
        - $ref: "#/components/parameters/impactMetricParam"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics:
    get:
      summary: Gets impact metrics for a specific RetroFunding round
      description: >
        Retrieves a paginated list of impact metrics for a specific RetroFunding round on Agora.
      operationId: getImpactMetricsOnRetroFundingRound
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RetroFundingImpactMetric"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}:
    get:
      summary: Gets a specific impact metric for an RetroFunding round
      description: >
        Retrieves a specific impact metric for a specific RetroFunding round on Agora.
      operationId: getImpactMetricOnRetroFundingRound
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetroFundingImpactMetric"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}/{addressOrEnsName}:
    post:
      summary: Records a view of an impact metric
      description: >
        Records a view of an impact metric by a specific address or ENS name
      operationId: recordImpactMetricView
      tags:
        - RetroFunding
        - RetroFundingImpactMetrics
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/addressOrEnsName"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  impact_metric_id:
                    type: string
                  address:
                    type: string
                  ts:
                    type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}/comments:
    get:
      summary: Gets comments on an impact metric
      description: >
        Gets a paginated list of comments on a particular impact metric. Ordered by creation date.
      operationId: getImpactMetricComments
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: >
            The desired method by which returned comments will be sorted.
            Supported values are: 'newest', 'votes'
          required: false
          schema:
            type: string
            enum:
              - newest
              - votes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/PageMetadata"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      summary: Creates a comment on an impact metric
      description: >
        Creates a comment on a specific impact metric for a specific round.
        Returns created comment.
      operationId: putImpactMetricComment
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}/comments/{commentId}:
    get:
      summary: Gets a specific comment on an impact metric
      description: >
        Gets a specific comment on a particular impact metric.
      operationId: getImpactMetricComment
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      summary: Updates existing comment
      description: >
        Updates a comment on a specific impact metric for a specific round.
        Returns updated comment.
      operationId: updateImpactMetricComment
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    delete:
      summary: Deletes a comment on an impact metric
      description: >
        Deletes a comment on a specific impact metric for a specific round.
      operationId: deleteImpactMetricComment
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /retrofunding/rounds/{roundId}/impactMetrics/{impactMetricId}/comments/{commentId}/votes:
    get:
      summary: Gets all votes for a speciffic comment
      description: >
        Gets all votes for a speciffic comment
      operationId: getImpactMetricCommentVote
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
        - commentsVotes
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommentVote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      summary: Creates or updates vote for a speciffic comment
      description: >
        Creates or updates vote for a speciffic comment.
        Address of the voter is taken from the auth token.
        Input is a number, where 1 is upvote, -1 is downvote, 0 is neutral.
      operationId: putImactMetricCommentVote
      tags:
        - RetroFunding
        - RetroFundingRounds
        - impactMetrics
        - comments
        - commentsVotes
        - Round 4
      parameters:
        - $ref: "#/components/parameters/roundIdParam"
        - $ref: "#/components/parameters/impactMetricParam"
        - $ref: "#/components/parameters/commentIdParam"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vote:
                  type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentVote"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
