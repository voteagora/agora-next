/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace NounsDAOStorageV3 {
  export type DynamicQuorumParamsStruct = {
    minQuorumVotesBPS: BigNumberish;
    maxQuorumVotesBPS: BigNumberish;
    quorumCoefficient: BigNumberish;
  };

  export type DynamicQuorumParamsStructOutput = [
    minQuorumVotesBPS: bigint,
    maxQuorumVotesBPS: bigint,
    quorumCoefficient: bigint,
  ] & {
    minQuorumVotesBPS: bigint;
    maxQuorumVotesBPS: bigint;
    quorumCoefficient: bigint;
  };

  export type ReceiptStruct = {
    hasVoted: boolean;
    support: BigNumberish;
    votes: BigNumberish;
  };

  export type ReceiptStructOutput = [
    hasVoted: boolean,
    support: bigint,
    votes: bigint,
  ] & { hasVoted: boolean; support: bigint; votes: bigint };

  export type NounsDAOParamsStruct = {
    votingPeriod: BigNumberish;
    votingDelay: BigNumberish;
    proposalThresholdBPS: BigNumberish;
    lastMinuteWindowInBlocks: BigNumberish;
    objectionPeriodDurationInBlocks: BigNumberish;
    proposalUpdatablePeriodInBlocks: BigNumberish;
  };

  export type NounsDAOParamsStructOutput = [
    votingPeriod: bigint,
    votingDelay: bigint,
    proposalThresholdBPS: bigint,
    lastMinuteWindowInBlocks: bigint,
    objectionPeriodDurationInBlocks: bigint,
    proposalUpdatablePeriodInBlocks: bigint,
  ] & {
    votingPeriod: bigint;
    votingDelay: bigint;
    proposalThresholdBPS: bigint;
    lastMinuteWindowInBlocks: bigint;
    objectionPeriodDurationInBlocks: bigint;
    proposalUpdatablePeriodInBlocks: bigint;
  };

  export type ProposalCondensedStruct = {
    id: BigNumberish;
    proposer: AddressLike;
    proposalThreshold: BigNumberish;
    quorumVotes: BigNumberish;
    eta: BigNumberish;
    startBlock: BigNumberish;
    endBlock: BigNumberish;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    abstainVotes: BigNumberish;
    canceled: boolean;
    vetoed: boolean;
    executed: boolean;
    totalSupply: BigNumberish;
    creationBlock: BigNumberish;
    signers: AddressLike[];
    updatePeriodEndBlock: BigNumberish;
    objectionPeriodEndBlock: BigNumberish;
    executeOnTimelockV1: boolean;
  };

  export type ProposalCondensedStructOutput = [
    id: bigint,
    proposer: string,
    proposalThreshold: bigint,
    quorumVotes: bigint,
    eta: bigint,
    startBlock: bigint,
    endBlock: bigint,
    forVotes: bigint,
    againstVotes: bigint,
    abstainVotes: bigint,
    canceled: boolean,
    vetoed: boolean,
    executed: boolean,
    totalSupply: bigint,
    creationBlock: bigint,
    signers: string[],
    updatePeriodEndBlock: bigint,
    objectionPeriodEndBlock: bigint,
    executeOnTimelockV1: boolean,
  ] & {
    id: bigint;
    proposer: string;
    proposalThreshold: bigint;
    quorumVotes: bigint;
    eta: bigint;
    startBlock: bigint;
    endBlock: bigint;
    forVotes: bigint;
    againstVotes: bigint;
    abstainVotes: bigint;
    canceled: boolean;
    vetoed: boolean;
    executed: boolean;
    totalSupply: bigint;
    creationBlock: bigint;
    signers: string[];
    updatePeriodEndBlock: bigint;
    objectionPeriodEndBlock: bigint;
    executeOnTimelockV1: boolean;
  };

  export type ProposerSignatureStruct = {
    sig: BytesLike;
    signer: AddressLike;
    expirationTimestamp: BigNumberish;
  };

  export type ProposerSignatureStructOutput = [
    sig: string,
    signer: string,
    expirationTimestamp: bigint,
  ] & { sig: string; signer: string; expirationTimestamp: bigint };

  export type DynamicQuorumParamsCheckpointStruct = {
    fromBlock: BigNumberish;
    params: NounsDAOStorageV3.DynamicQuorumParamsStruct;
  };

  export type DynamicQuorumParamsCheckpointStructOutput = [
    fromBlock: bigint,
    params: NounsDAOStorageV3.DynamicQuorumParamsStructOutput,
  ] & {
    fromBlock: bigint;
    params: NounsDAOStorageV3.DynamicQuorumParamsStructOutput;
  };
}

export declare namespace NounsDAOStorageV2 {
  export type ProposalCondensedStruct = {
    id: BigNumberish;
    proposer: AddressLike;
    proposalThreshold: BigNumberish;
    quorumVotes: BigNumberish;
    eta: BigNumberish;
    startBlock: BigNumberish;
    endBlock: BigNumberish;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    abstainVotes: BigNumberish;
    canceled: boolean;
    vetoed: boolean;
    executed: boolean;
    totalSupply: BigNumberish;
    creationBlock: BigNumberish;
  };

  export type ProposalCondensedStructOutput = [
    id: bigint,
    proposer: string,
    proposalThreshold: bigint,
    quorumVotes: bigint,
    eta: bigint,
    startBlock: bigint,
    endBlock: bigint,
    forVotes: bigint,
    againstVotes: bigint,
    abstainVotes: bigint,
    canceled: boolean,
    vetoed: boolean,
    executed: boolean,
    totalSupply: bigint,
    creationBlock: bigint,
  ] & {
    id: bigint;
    proposer: string;
    proposalThreshold: bigint;
    quorumVotes: bigint;
    eta: bigint;
    startBlock: bigint;
    endBlock: bigint;
    forVotes: bigint;
    againstVotes: bigint;
    abstainVotes: bigint;
    canceled: boolean;
    vetoed: boolean;
    executed: boolean;
    totalSupply: bigint;
    creationBlock: bigint;
  };
}

export interface NounsGovernorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PROPOSAL_THRESHOLD_BPS"
      | "MAX_VOTING_DELAY"
      | "MAX_VOTING_PERIOD"
      | "MIN_PROPOSAL_THRESHOLD_BPS"
      | "MIN_VOTING_DELAY"
      | "MIN_VOTING_PERIOD"
      | "_acceptAdmin"
      | "_acceptVetoer"
      | "_burnVetoPower"
      | "_setDynamicQuorumParams"
      | "_setErc20TokensToIncludeInFork"
      | "_setForkDAODeployer"
      | "_setForkEscrow"
      | "_setForkParams"
      | "_setForkPeriod"
      | "_setForkThresholdBPS"
      | "_setLastMinuteWindowInBlocks"
      | "_setMaxQuorumVotesBPS"
      | "_setMinQuorumVotesBPS"
      | "_setObjectionPeriodDurationInBlocks"
      | "_setPendingAdmin"
      | "_setPendingVetoer"
      | "_setProposalThresholdBPS"
      | "_setProposalUpdatablePeriodInBlocks"
      | "_setQuorumCoefficient"
      | "_setTimelocksAndAdmin"
      | "_setVoteSnapshotBlockSwitchProposalId"
      | "_setVotingDelay"
      | "_setVotingPeriod"
      | "_withdraw"
      | "adjustedTotalSupply"
      | "cancel"
      | "cancelSig"
      | "castRefundableVote"
      | "castRefundableVoteWithReason"
      | "castVote"
      | "castVoteBySig"
      | "castVoteWithReason"
      | "dynamicQuorumVotes"
      | "erc20TokensToIncludeInFork"
      | "escrowToFork"
      | "execute"
      | "executeFork"
      | "executeOnTimelockV1"
      | "forkDAODeployer"
      | "forkEndTimestamp"
      | "forkEscrow"
      | "forkPeriod"
      | "forkThreshold"
      | "forkThresholdBPS"
      | "getActions"
      | "getDynamicQuorumParamsAt"
      | "getReceipt"
      | "initialize"
      | "joinFork"
      | "lastMinuteWindowInBlocks"
      | "latestProposalIds"
      | "maxQuorumVotes"
      | "minQuorumVotes"
      | "nouns"
      | "numTokensInForkEscrow"
      | "objectionPeriodDurationInBlocks"
      | "pendingVetoer"
      | "proposalCount"
      | "proposalMaxOperations"
      | "proposalThreshold"
      | "proposalThresholdBPS"
      | "proposalUpdatablePeriodInBlocks"
      | "proposals"
      | "proposalsV3"
      | "propose"
      | "proposeBySigs"
      | "proposeOnTimelockV1"
      | "queue"
      | "quorumParamsCheckpoints()"
      | "quorumParamsCheckpoints(uint256)"
      | "quorumVotes"
      | "quorumVotesBPS"
      | "state"
      | "timelock"
      | "timelockV1"
      | "updateProposal"
      | "updateProposalBySigs"
      | "updateProposalDescription"
      | "updateProposalTransactions"
      | "veto"
      | "vetoer"
      | "voteSnapshotBlockSwitchProposalId"
      | "votingDelay"
      | "votingPeriod"
      | "withdrawDAONounsFromEscrow"
      | "withdrawFromForkEscrow"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DAOWithdrawNounsFromEscrow"
      | "ERC20TokensToIncludeInForkSet"
      | "EscrowedToFork"
      | "ExecuteFork"
      | "ForkDAODeployerSet"
      | "ForkPeriodSet"
      | "ForkThresholdSet"
      | "JoinFork"
      | "LastMinuteWindowSet"
      | "MaxQuorumVotesBPSSet"
      | "MinQuorumVotesBPSSet"
      | "NewAdmin"
      | "NewImplementation"
      | "NewPendingAdmin"
      | "NewPendingVetoer"
      | "NewVetoer"
      | "ObjectionPeriodDurationSet"
      | "ProposalCanceled"
      | "ProposalCreated"
      | "ProposalCreatedOnTimelockV1"
      | "ProposalCreatedWithRequirements(uint256,address,address[],address[],uint256[],string[],bytes[],uint256,uint256,uint256,uint256,uint256,string)"
      | "ProposalCreatedWithRequirements(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,uint256,uint256,string)"
      | "ProposalDescriptionUpdated"
      | "ProposalExecuted"
      | "ProposalObjectionPeriodSet"
      | "ProposalQueued"
      | "ProposalThresholdBPSSet"
      | "ProposalTransactionsUpdated"
      | "ProposalUpdatablePeriodSet"
      | "ProposalUpdated"
      | "ProposalVetoed"
      | "QuorumCoefficientSet"
      | "QuorumVotesBPSSet"
      | "RefundableVote"
      | "SignatureCancelled"
      | "TimelocksAndAdminSet"
      | "VoteCast"
      | "VoteSnapshotBlockSwitchProposalIdSet"
      | "VotingDelaySet"
      | "VotingPeriodSet"
      | "Withdraw"
      | "WithdrawFromForkEscrow"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PROPOSAL_THRESHOLD_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VOTING_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROPOSAL_THRESHOLD_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTING_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_acceptVetoer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_burnVetoPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setDynamicQuorumParams",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setErc20TokensToIncludeInFork",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setForkDAODeployer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setForkEscrow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setForkParams",
    values: [
      AddressLike,
      AddressLike,
      AddressLike[],
      BigNumberish,
      BigNumberish,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_setForkPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setForkThresholdBPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setLastMinuteWindowInBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMaxQuorumVotesBPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMinQuorumVotesBPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setObjectionPeriodDurationInBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPendingVetoer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setProposalThresholdBPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setProposalUpdatablePeriodInBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setQuorumCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setTimelocksAndAdmin",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setVoteSnapshotBlockSwitchProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setVotingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adjustedTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castRefundableVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castRefundableVoteWithReason",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicQuorumVotes",
    values: [
      BigNumberish,
      BigNumberish,
      NounsDAOStorageV3.DynamicQuorumParamsStruct,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20TokensToIncludeInFork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowToFork",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeOnTimelockV1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forkDAODeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forkEndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forkEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forkPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forkThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forkThresholdBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDynamicQuorumParamsAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      NounsDAOStorageV3.NounsDAOParamsStruct,
      NounsDAOStorageV3.DynamicQuorumParamsStruct,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinFork",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMinuteWindowInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxQuorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minQuorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nouns", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numTokensInForkEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "objectionPeriodDurationInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingVetoer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThresholdBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalUpdatablePeriodInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsV3",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [AddressLike[], BigNumberish[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeBySigs",
    values: [
      NounsDAOStorageV3.ProposerSignatureStruct[],
      AddressLike[],
      BigNumberish[],
      string[],
      BytesLike[],
      string,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeOnTimelockV1",
    values: [AddressLike[], BigNumberish[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "quorumParamsCheckpoints()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumParamsCheckpoints(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumVotesBPS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timelockV1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateProposal",
    values: [
      BigNumberish,
      AddressLike[],
      BigNumberish[],
      string[],
      BytesLike[],
      string,
      string,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProposalBySigs",
    values: [
      BigNumberish,
      NounsDAOStorageV3.ProposerSignatureStruct[],
      AddressLike[],
      BigNumberish[],
      string[],
      BytesLike[],
      string,
      string,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProposalDescription",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProposalTransactions",
    values: [
      BigNumberish,
      AddressLike[],
      BigNumberish[],
      string[],
      BytesLike[],
      string,
    ]
  ): string;
  encodeFunctionData(functionFragment: "veto", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "vetoer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteSnapshotBlockSwitchProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDAONounsFromEscrow",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromForkEscrow",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PROPOSAL_THRESHOLD_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VOTING_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROPOSAL_THRESHOLD_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTING_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_acceptVetoer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_burnVetoPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setDynamicQuorumParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setErc20TokensToIncludeInFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setForkDAODeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setForkEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setForkParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setForkPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setForkThresholdBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setLastMinuteWindowInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMaxQuorumVotesBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMinQuorumVotesBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setObjectionPeriodDurationInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPendingVetoer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setProposalThresholdBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setProposalUpdatablePeriodInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setQuorumCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setTimelocksAndAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setVoteSnapshotBlockSwitchProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setVotingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustedTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castRefundableVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castRefundableVoteWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicQuorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20TokensToIncludeInFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowToFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOnTimelockV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forkDAODeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forkEndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forkEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forkPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forkThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forkThresholdBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDynamicQuorumParamsAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinFork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMinuteWindowInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxQuorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minQuorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nouns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numTokensInForkEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "objectionPeriodDurationInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingVetoer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThresholdBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalUpdatablePeriodInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalsV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeBySigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeOnTimelockV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumParamsCheckpoints()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumParamsCheckpoints(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotesBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelockV1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProposalBySigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProposalDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProposalTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "veto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vetoer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteSnapshotBlockSwitchProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDAONounsFromEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromForkEscrow",
    data: BytesLike
  ): Result;
}

export namespace DAOWithdrawNounsFromEscrowEvent {
  export type InputTuple = [tokenIds: BigNumberish[], to: AddressLike];
  export type OutputTuple = [tokenIds: bigint[], to: string];
  export interface OutputObject {
    tokenIds: bigint[];
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20TokensToIncludeInForkSetEvent {
  export type InputTuple = [
    oldErc20Tokens: AddressLike[],
    newErc20tokens: AddressLike[],
  ];
  export type OutputTuple = [
    oldErc20Tokens: string[],
    newErc20tokens: string[],
  ];
  export interface OutputObject {
    oldErc20Tokens: string[];
    newErc20tokens: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowedToForkEvent {
  export type InputTuple = [
    forkId: BigNumberish,
    owner: AddressLike,
    tokenIds: BigNumberish[],
    proposalIds: BigNumberish[],
    reason: string,
  ];
  export type OutputTuple = [
    forkId: bigint,
    owner: string,
    tokenIds: bigint[],
    proposalIds: bigint[],
    reason: string,
  ];
  export interface OutputObject {
    forkId: bigint;
    owner: string;
    tokenIds: bigint[];
    proposalIds: bigint[];
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteForkEvent {
  export type InputTuple = [
    forkId: BigNumberish,
    forkTreasury: AddressLike,
    forkToken: AddressLike,
    forkEndTimestamp: BigNumberish,
    tokensInEscrow: BigNumberish,
  ];
  export type OutputTuple = [
    forkId: bigint,
    forkTreasury: string,
    forkToken: string,
    forkEndTimestamp: bigint,
    tokensInEscrow: bigint,
  ];
  export interface OutputObject {
    forkId: bigint;
    forkTreasury: string;
    forkToken: string;
    forkEndTimestamp: bigint;
    tokensInEscrow: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForkDAODeployerSetEvent {
  export type InputTuple = [
    oldForkDAODeployer: AddressLike,
    newForkDAODeployer: AddressLike,
  ];
  export type OutputTuple = [
    oldForkDAODeployer: string,
    newForkDAODeployer: string,
  ];
  export interface OutputObject {
    oldForkDAODeployer: string;
    newForkDAODeployer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForkPeriodSetEvent {
  export type InputTuple = [
    oldForkPeriod: BigNumberish,
    newForkPeriod: BigNumberish,
  ];
  export type OutputTuple = [oldForkPeriod: bigint, newForkPeriod: bigint];
  export interface OutputObject {
    oldForkPeriod: bigint;
    newForkPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForkThresholdSetEvent {
  export type InputTuple = [
    oldForkThreshold: BigNumberish,
    newForkThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    oldForkThreshold: bigint,
    newForkThreshold: bigint,
  ];
  export interface OutputObject {
    oldForkThreshold: bigint;
    newForkThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JoinForkEvent {
  export type InputTuple = [
    forkId: BigNumberish,
    owner: AddressLike,
    tokenIds: BigNumberish[],
    proposalIds: BigNumberish[],
    reason: string,
  ];
  export type OutputTuple = [
    forkId: bigint,
    owner: string,
    tokenIds: bigint[],
    proposalIds: bigint[],
    reason: string,
  ];
  export interface OutputObject {
    forkId: bigint;
    owner: string;
    tokenIds: bigint[];
    proposalIds: bigint[];
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LastMinuteWindowSetEvent {
  export type InputTuple = [
    oldLastMinuteWindowInBlocks: BigNumberish,
    newLastMinuteWindowInBlocks: BigNumberish,
  ];
  export type OutputTuple = [
    oldLastMinuteWindowInBlocks: bigint,
    newLastMinuteWindowInBlocks: bigint,
  ];
  export interface OutputObject {
    oldLastMinuteWindowInBlocks: bigint;
    newLastMinuteWindowInBlocks: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxQuorumVotesBPSSetEvent {
  export type InputTuple = [
    oldMaxQuorumVotesBPS: BigNumberish,
    newMaxQuorumVotesBPS: BigNumberish,
  ];
  export type OutputTuple = [
    oldMaxQuorumVotesBPS: bigint,
    newMaxQuorumVotesBPS: bigint,
  ];
  export interface OutputObject {
    oldMaxQuorumVotesBPS: bigint;
    newMaxQuorumVotesBPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinQuorumVotesBPSSetEvent {
  export type InputTuple = [
    oldMinQuorumVotesBPS: BigNumberish,
    newMinQuorumVotesBPS: BigNumberish,
  ];
  export type OutputTuple = [
    oldMinQuorumVotesBPS: bigint,
    newMinQuorumVotesBPS: bigint,
  ];
  export interface OutputObject {
    oldMinQuorumVotesBPS: bigint;
    newMinQuorumVotesBPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewImplementationEvent {
  export type InputTuple = [
    oldImplementation: AddressLike,
    newImplementation: AddressLike,
  ];
  export type OutputTuple = [
    oldImplementation: string,
    newImplementation: string,
  ];
  export interface OutputObject {
    oldImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike,
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingVetoerEvent {
  export type InputTuple = [
    oldPendingVetoer: AddressLike,
    newPendingVetoer: AddressLike,
  ];
  export type OutputTuple = [
    oldPendingVetoer: string,
    newPendingVetoer: string,
  ];
  export interface OutputObject {
    oldPendingVetoer: string;
    newPendingVetoer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewVetoerEvent {
  export type InputTuple = [oldVetoer: AddressLike, newVetoer: AddressLike];
  export type OutputTuple = [oldVetoer: string, newVetoer: string];
  export interface OutputObject {
    oldVetoer: string;
    newVetoer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ObjectionPeriodDurationSetEvent {
  export type InputTuple = [
    oldObjectionPeriodDurationInBlocks: BigNumberish,
    newObjectionPeriodDurationInBlocks: BigNumberish,
  ];
  export type OutputTuple = [
    oldObjectionPeriodDurationInBlocks: bigint,
    newObjectionPeriodDurationInBlocks: bigint,
  ];
  export interface OutputObject {
    oldObjectionPeriodDurationInBlocks: bigint;
    newObjectionPeriodDurationInBlocks: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCanceledEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    description: string,
  ];
  export type OutputTuple = [
    id: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    startBlock: bigint,
    endBlock: bigint,
    description: string,
  ];
  export interface OutputObject {
    id: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    startBlock: bigint;
    endBlock: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedOnTimelockV1Event {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedWithRequirements_uint256_address_address_array_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_uint256_string_Event {
  export type InputTuple = [
    id: BigNumberish,
    proposer: AddressLike,
    signers: AddressLike[],
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    updatePeriodEndBlock: BigNumberish,
    proposalThreshold: BigNumberish,
    quorumVotes: BigNumberish,
    description: string,
  ];
  export type OutputTuple = [
    id: bigint,
    proposer: string,
    signers: string[],
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    startBlock: bigint,
    endBlock: bigint,
    updatePeriodEndBlock: bigint,
    proposalThreshold: bigint,
    quorumVotes: bigint,
    description: string,
  ];
  export interface OutputObject {
    id: bigint;
    proposer: string;
    signers: string[];
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    startBlock: bigint;
    endBlock: bigint;
    updatePeriodEndBlock: bigint;
    proposalThreshold: bigint;
    quorumVotes: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedWithRequirements_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_string_Event {
  export type InputTuple = [
    id: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    proposalThreshold: BigNumberish,
    quorumVotes: BigNumberish,
    description: string,
  ];
  export type OutputTuple = [
    id: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    startBlock: bigint,
    endBlock: bigint,
    proposalThreshold: bigint,
    quorumVotes: bigint,
    description: string,
  ];
  export interface OutputObject {
    id: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    startBlock: bigint;
    endBlock: bigint;
    proposalThreshold: bigint;
    quorumVotes: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalDescriptionUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    proposer: AddressLike,
    description: string,
    updateMessage: string,
  ];
  export type OutputTuple = [
    id: bigint,
    proposer: string,
    description: string,
    updateMessage: string,
  ];
  export interface OutputObject {
    id: bigint;
    proposer: string;
    description: string;
    updateMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalObjectionPeriodSetEvent {
  export type InputTuple = [
    id: BigNumberish,
    objectionPeriodEndBlock: BigNumberish,
  ];
  export type OutputTuple = [id: bigint, objectionPeriodEndBlock: bigint];
  export interface OutputObject {
    id: bigint;
    objectionPeriodEndBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalQueuedEvent {
  export type InputTuple = [id: BigNumberish, eta: BigNumberish];
  export type OutputTuple = [id: bigint, eta: bigint];
  export interface OutputObject {
    id: bigint;
    eta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalThresholdBPSSetEvent {
  export type InputTuple = [
    oldProposalThresholdBPS: BigNumberish,
    newProposalThresholdBPS: BigNumberish,
  ];
  export type OutputTuple = [
    oldProposalThresholdBPS: bigint,
    newProposalThresholdBPS: bigint,
  ];
  export interface OutputObject {
    oldProposalThresholdBPS: bigint;
    newProposalThresholdBPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalTransactionsUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    updateMessage: string,
  ];
  export type OutputTuple = [
    id: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    updateMessage: string,
  ];
  export interface OutputObject {
    id: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    updateMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalUpdatablePeriodSetEvent {
  export type InputTuple = [
    oldProposalUpdatablePeriodInBlocks: BigNumberish,
    newProposalUpdatablePeriodInBlocks: BigNumberish,
  ];
  export type OutputTuple = [
    oldProposalUpdatablePeriodInBlocks: bigint,
    newProposalUpdatablePeriodInBlocks: bigint,
  ];
  export interface OutputObject {
    oldProposalUpdatablePeriodInBlocks: bigint;
    newProposalUpdatablePeriodInBlocks: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    updateMessage: string,
  ];
  export type OutputTuple = [
    id: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    description: string,
    updateMessage: string,
  ];
  export interface OutputObject {
    id: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    description: string;
    updateMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalVetoedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumCoefficientSetEvent {
  export type InputTuple = [
    oldQuorumCoefficient: BigNumberish,
    newQuorumCoefficient: BigNumberish,
  ];
  export type OutputTuple = [
    oldQuorumCoefficient: bigint,
    newQuorumCoefficient: bigint,
  ];
  export interface OutputObject {
    oldQuorumCoefficient: bigint;
    newQuorumCoefficient: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumVotesBPSSetEvent {
  export type InputTuple = [
    oldQuorumVotesBPS: BigNumberish,
    newQuorumVotesBPS: BigNumberish,
  ];
  export type OutputTuple = [
    oldQuorumVotesBPS: bigint,
    newQuorumVotesBPS: bigint,
  ];
  export interface OutputObject {
    oldQuorumVotesBPS: bigint;
    newQuorumVotesBPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundableVoteEvent {
  export type InputTuple = [
    voter: AddressLike,
    refundAmount: BigNumberish,
    refundSent: boolean,
  ];
  export type OutputTuple = [
    voter: string,
    refundAmount: bigint,
    refundSent: boolean,
  ];
  export interface OutputObject {
    voter: string;
    refundAmount: bigint;
    refundSent: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureCancelledEvent {
  export type InputTuple = [signer: AddressLike, sig: BytesLike];
  export type OutputTuple = [signer: string, sig: string];
  export interface OutputObject {
    signer: string;
    sig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelocksAndAdminSetEvent {
  export type InputTuple = [
    timelock: AddressLike,
    timelockV1: AddressLike,
    admin: AddressLike,
  ];
  export type OutputTuple = [
    timelock: string,
    timelockV1: string,
    admin: string,
  ];
  export interface OutputObject {
    timelock: string;
    timelockV1: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: BigNumberish,
    votes: BigNumberish,
    reason: string,
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: bigint,
    votes: bigint,
    reason: string,
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: bigint;
    votes: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteSnapshotBlockSwitchProposalIdSetEvent {
  export type InputTuple = [
    oldVoteSnapshotBlockSwitchProposalId: BigNumberish,
    newVoteSnapshotBlockSwitchProposalId: BigNumberish,
  ];
  export type OutputTuple = [
    oldVoteSnapshotBlockSwitchProposalId: bigint,
    newVoteSnapshotBlockSwitchProposalId: bigint,
  ];
  export interface OutputObject {
    oldVoteSnapshotBlockSwitchProposalId: bigint;
    newVoteSnapshotBlockSwitchProposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingDelaySetEvent {
  export type InputTuple = [
    oldVotingDelay: BigNumberish,
    newVotingDelay: BigNumberish,
  ];
  export type OutputTuple = [oldVotingDelay: bigint, newVotingDelay: bigint];
  export interface OutputObject {
    oldVotingDelay: bigint;
    newVotingDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPeriodSetEvent {
  export type InputTuple = [
    oldVotingPeriod: BigNumberish,
    newVotingPeriod: BigNumberish,
  ];
  export type OutputTuple = [oldVotingPeriod: bigint, newVotingPeriod: bigint];
  export interface OutputObject {
    oldVotingPeriod: bigint;
    newVotingPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [amount: BigNumberish, sent: boolean];
  export type OutputTuple = [amount: bigint, sent: boolean];
  export interface OutputObject {
    amount: bigint;
    sent: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFromForkEscrowEvent {
  export type InputTuple = [
    forkId: BigNumberish,
    owner: AddressLike,
    tokenIds: BigNumberish[],
  ];
  export type OutputTuple = [forkId: bigint, owner: string, tokenIds: bigint[]];
  export interface OutputObject {
    forkId: bigint;
    owner: string;
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NounsGovernor extends BaseContract {
  connect(runner?: ContractRunner | null): NounsGovernor;
  waitForDeployment(): Promise<this>;

  interface: NounsGovernorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PROPOSAL_THRESHOLD_BPS: TypedContractMethod<[], [bigint], "view">;

  MAX_VOTING_DELAY: TypedContractMethod<[], [bigint], "view">;

  MAX_VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MIN_PROPOSAL_THRESHOLD_BPS: TypedContractMethod<[], [bigint], "view">;

  MIN_VOTING_DELAY: TypedContractMethod<[], [bigint], "view">;

  MIN_VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  _acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  _acceptVetoer: TypedContractMethod<[], [void], "nonpayable">;

  _burnVetoPower: TypedContractMethod<[], [void], "nonpayable">;

  _setDynamicQuorumParams: TypedContractMethod<
    [
      newMinQuorumVotesBPS: BigNumberish,
      newMaxQuorumVotesBPS: BigNumberish,
      newQuorumCoefficient: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  _setErc20TokensToIncludeInFork: TypedContractMethod<
    [erc20tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  _setForkDAODeployer: TypedContractMethod<
    [newForkDAODeployer: AddressLike],
    [void],
    "nonpayable"
  >;

  _setForkEscrow: TypedContractMethod<
    [newForkEscrow: AddressLike],
    [void],
    "nonpayable"
  >;

  _setForkParams: TypedContractMethod<
    [
      forkEscrow_: AddressLike,
      forkDAODeployer_: AddressLike,
      erc20TokensToIncludeInFork_: AddressLike[],
      forkPeriod_: BigNumberish,
      forkThresholdBPS_: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  _setForkPeriod: TypedContractMethod<
    [newForkPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setForkThresholdBPS: TypedContractMethod<
    [newForkThresholdBPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setLastMinuteWindowInBlocks: TypedContractMethod<
    [newLastMinuteWindowInBlocks: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setMaxQuorumVotesBPS: TypedContractMethod<
    [newMaxQuorumVotesBPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setMinQuorumVotesBPS: TypedContractMethod<
    [newMinQuorumVotesBPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setObjectionPeriodDurationInBlocks: TypedContractMethod<
    [newObjectionPeriodDurationInBlocks: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setPendingAdmin: TypedContractMethod<
    [newPendingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  _setPendingVetoer: TypedContractMethod<
    [newPendingVetoer: AddressLike],
    [void],
    "nonpayable"
  >;

  _setProposalThresholdBPS: TypedContractMethod<
    [newProposalThresholdBPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setProposalUpdatablePeriodInBlocks: TypedContractMethod<
    [newProposalUpdatablePeriodInBlocks: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setQuorumCoefficient: TypedContractMethod<
    [newQuorumCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setTimelocksAndAdmin: TypedContractMethod<
    [
      newTimelock: AddressLike,
      newTimelockV1: AddressLike,
      newAdmin: AddressLike,
    ],
    [void],
    "nonpayable"
  >;

  _setVoteSnapshotBlockSwitchProposalId: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  _setVotingDelay: TypedContractMethod<
    [newVotingDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setVotingPeriod: TypedContractMethod<
    [newVotingPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  _withdraw: TypedContractMethod<[], [[bigint, boolean]], "nonpayable">;

  adjustedTotalSupply: TypedContractMethod<[], [bigint], "view">;

  cancel: TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;

  cancelSig: TypedContractMethod<[sig: BytesLike], [void], "nonpayable">;

  castRefundableVote: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;

  castRefundableVoteWithReason: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;

  castVoteBySig: TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  castVoteWithReason: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  dynamicQuorumVotes: TypedContractMethod<
    [
      againstVotes: BigNumberish,
      totalSupply: BigNumberish,
      params: NounsDAOStorageV3.DynamicQuorumParamsStruct,
    ],
    [bigint],
    "view"
  >;

  erc20TokensToIncludeInFork: TypedContractMethod<[], [string[]], "view">;

  escrowToFork: TypedContractMethod<
    [tokenIds: BigNumberish[], proposalIds: BigNumberish[], reason: string],
    [void],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeFork: TypedContractMethod<
    [],
    [[string, string] & { forkTreasury: string; forkToken: string }],
    "nonpayable"
  >;

  executeOnTimelockV1: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  forkDAODeployer: TypedContractMethod<[], [string], "view">;

  forkEndTimestamp: TypedContractMethod<[], [bigint], "view">;

  forkEscrow: TypedContractMethod<[], [string], "view">;

  forkPeriod: TypedContractMethod<[], [bigint], "view">;

  forkThreshold: TypedContractMethod<[], [bigint], "view">;

  forkThresholdBPS: TypedContractMethod<[], [bigint], "view">;

  getActions: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string[], bigint[], string[], string[]] & {
        targets: string[];
        values: bigint[];
        signatures: string[];
        calldatas: string[];
      },
    ],
    "view"
  >;

  getDynamicQuorumParamsAt: TypedContractMethod<
    [blockNumber_: BigNumberish],
    [NounsDAOStorageV3.DynamicQuorumParamsStructOutput],
    "view"
  >;

  getReceipt: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [NounsDAOStorageV3.ReceiptStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      timelock_: AddressLike,
      nouns_: AddressLike,
      forkEscrow_: AddressLike,
      forkDAODeployer_: AddressLike,
      vetoer_: AddressLike,
      daoParams_: NounsDAOStorageV3.NounsDAOParamsStruct,
      dynamicQuorumParams_: NounsDAOStorageV3.DynamicQuorumParamsStruct,
    ],
    [void],
    "nonpayable"
  >;

  joinFork: TypedContractMethod<
    [tokenIds: BigNumberish[], proposalIds: BigNumberish[], reason: string],
    [void],
    "nonpayable"
  >;

  lastMinuteWindowInBlocks: TypedContractMethod<[], [bigint], "view">;

  latestProposalIds: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  maxQuorumVotes: TypedContractMethod<[], [bigint], "view">;

  minQuorumVotes: TypedContractMethod<[], [bigint], "view">;

  nouns: TypedContractMethod<[], [string], "view">;

  numTokensInForkEscrow: TypedContractMethod<[], [bigint], "view">;

  objectionPeriodDurationInBlocks: TypedContractMethod<[], [bigint], "view">;

  pendingVetoer: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposalMaxOperations: TypedContractMethod<[], [bigint], "view">;

  proposalThreshold: TypedContractMethod<[], [bigint], "view">;

  proposalThresholdBPS: TypedContractMethod<[], [bigint], "view">;

  proposalUpdatablePeriodInBlocks: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [proposalId: BigNumberish],
    [NounsDAOStorageV2.ProposalCondensedStructOutput],
    "view"
  >;

  proposalsV3: TypedContractMethod<
    [proposalId: BigNumberish],
    [NounsDAOStorageV3.ProposalCondensedStructOutput],
    "view"
  >;

  propose: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
    ],
    [bigint],
    "nonpayable"
  >;

  proposeBySigs: TypedContractMethod<
    [
      proposerSignatures: NounsDAOStorageV3.ProposerSignatureStruct[],
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
    ],
    [bigint],
    "nonpayable"
  >;

  proposeOnTimelockV1: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
    ],
    [bigint],
    "nonpayable"
  >;

  queue: TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;

  "quorumParamsCheckpoints()": TypedContractMethod<
    [],
    [NounsDAOStorageV3.DynamicQuorumParamsCheckpointStructOutput[]],
    "view"
  >;

  "quorumParamsCheckpoints(uint256)": TypedContractMethod<
    [index: BigNumberish],
    [NounsDAOStorageV3.DynamicQuorumParamsCheckpointStructOutput],
    "view"
  >;

  quorumVotes: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  quorumVotesBPS: TypedContractMethod<[], [bigint], "view">;

  state: TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  timelock: TypedContractMethod<[], [string], "view">;

  timelockV1: TypedContractMethod<[], [string], "view">;

  updateProposal: TypedContractMethod<
    [
      proposalId: BigNumberish,
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      updateMessage: string,
    ],
    [void],
    "nonpayable"
  >;

  updateProposalBySigs: TypedContractMethod<
    [
      proposalId: BigNumberish,
      proposerSignatures: NounsDAOStorageV3.ProposerSignatureStruct[],
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      updateMessage: string,
    ],
    [void],
    "nonpayable"
  >;

  updateProposalDescription: TypedContractMethod<
    [proposalId: BigNumberish, description: string, updateMessage: string],
    [void],
    "nonpayable"
  >;

  updateProposalTransactions: TypedContractMethod<
    [
      proposalId: BigNumberish,
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      updateMessage: string,
    ],
    [void],
    "nonpayable"
  >;

  veto: TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;

  vetoer: TypedContractMethod<[], [string], "view">;

  voteSnapshotBlockSwitchProposalId: TypedContractMethod<[], [bigint], "view">;

  votingDelay: TypedContractMethod<[], [bigint], "view">;

  votingPeriod: TypedContractMethod<[], [bigint], "view">;

  withdrawDAONounsFromEscrow: TypedContractMethod<
    [tokenIds: BigNumberish[], to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFromForkEscrow: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PROPOSAL_THRESHOLD_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_VOTING_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PROPOSAL_THRESHOLD_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_VOTING_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_acceptVetoer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_burnVetoPower"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setDynamicQuorumParams"
  ): TypedContractMethod<
    [
      newMinQuorumVotesBPS: BigNumberish,
      newMaxQuorumVotesBPS: BigNumberish,
      newQuorumCoefficient: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setErc20TokensToIncludeInFork"
  ): TypedContractMethod<[erc20tokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setForkDAODeployer"
  ): TypedContractMethod<
    [newForkDAODeployer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setForkEscrow"
  ): TypedContractMethod<[newForkEscrow: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setForkParams"
  ): TypedContractMethod<
    [
      forkEscrow_: AddressLike,
      forkDAODeployer_: AddressLike,
      erc20TokensToIncludeInFork_: AddressLike[],
      forkPeriod_: BigNumberish,
      forkThresholdBPS_: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setForkPeriod"
  ): TypedContractMethod<[newForkPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setForkThresholdBPS"
  ): TypedContractMethod<
    [newForkThresholdBPS: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setLastMinuteWindowInBlocks"
  ): TypedContractMethod<
    [newLastMinuteWindowInBlocks: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setMaxQuorumVotesBPS"
  ): TypedContractMethod<
    [newMaxQuorumVotesBPS: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setMinQuorumVotesBPS"
  ): TypedContractMethod<
    [newMinQuorumVotesBPS: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setObjectionPeriodDurationInBlocks"
  ): TypedContractMethod<
    [newObjectionPeriodDurationInBlocks: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setPendingAdmin"
  ): TypedContractMethod<[newPendingAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setPendingVetoer"
  ): TypedContractMethod<[newPendingVetoer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setProposalThresholdBPS"
  ): TypedContractMethod<
    [newProposalThresholdBPS: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setProposalUpdatablePeriodInBlocks"
  ): TypedContractMethod<
    [newProposalUpdatablePeriodInBlocks: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setQuorumCoefficient"
  ): TypedContractMethod<
    [newQuorumCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setTimelocksAndAdmin"
  ): TypedContractMethod<
    [
      newTimelock: AddressLike,
      newTimelockV1: AddressLike,
      newAdmin: AddressLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setVoteSnapshotBlockSwitchProposalId"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setVotingDelay"
  ): TypedContractMethod<[newVotingDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setVotingPeriod"
  ): TypedContractMethod<[newVotingPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_withdraw"
  ): TypedContractMethod<[], [[bigint, boolean]], "nonpayable">;
  getFunction(
    nameOrSignature: "adjustedTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelSig"
  ): TypedContractMethod<[sig: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castRefundableVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castRefundableVoteWithReason"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteBySig"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReason"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dynamicQuorumVotes"
  ): TypedContractMethod<
    [
      againstVotes: BigNumberish,
      totalSupply: BigNumberish,
      params: NounsDAOStorageV3.DynamicQuorumParamsStruct,
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "erc20TokensToIncludeInFork"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "escrowToFork"
  ): TypedContractMethod<
    [tokenIds: BigNumberish[], proposalIds: BigNumberish[], reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeFork"
  ): TypedContractMethod<
    [],
    [[string, string] & { forkTreasury: string; forkToken: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeOnTimelockV1"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forkDAODeployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "forkEndTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forkEscrow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "forkPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forkThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forkThresholdBPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "getActions"): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string[], bigint[], string[], string[]] & {
        targets: string[];
        values: bigint[];
        signatures: string[];
        calldatas: string[];
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDynamicQuorumParamsAt"
  ): TypedContractMethod<
    [blockNumber_: BigNumberish],
    [NounsDAOStorageV3.DynamicQuorumParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReceipt"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [NounsDAOStorageV3.ReceiptStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      timelock_: AddressLike,
      nouns_: AddressLike,
      forkEscrow_: AddressLike,
      forkDAODeployer_: AddressLike,
      vetoer_: AddressLike,
      daoParams_: NounsDAOStorageV3.NounsDAOParamsStruct,
      dynamicQuorumParams_: NounsDAOStorageV3.DynamicQuorumParamsStruct,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinFork"
  ): TypedContractMethod<
    [tokenIds: BigNumberish[], proposalIds: BigNumberish[], reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastMinuteWindowInBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestProposalIds"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxQuorumVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minQuorumVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nouns"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "numTokensInForkEscrow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "objectionPeriodDurationInBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingVetoer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalMaxOperations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalThresholdBPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalUpdatablePeriodInBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [NounsDAOStorageV2.ProposalCondensedStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalsV3"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [NounsDAOStorageV3.ProposalCondensedStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeBySigs"
  ): TypedContractMethod<
    [
      proposerSignatures: NounsDAOStorageV3.ProposerSignatureStruct[],
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeOnTimelockV1"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queue"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "quorumParamsCheckpoints()"
  ): TypedContractMethod<
    [],
    [NounsDAOStorageV3.DynamicQuorumParamsCheckpointStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "quorumParamsCheckpoints(uint256)"
  ): TypedContractMethod<
    [index: BigNumberish],
    [NounsDAOStorageV3.DynamicQuorumParamsCheckpointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "quorumVotes"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quorumVotesBPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "timelock"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timelockV1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateProposal"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      updateMessage: string,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProposalBySigs"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      proposerSignatures: NounsDAOStorageV3.ProposerSignatureStruct[],
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      updateMessage: string,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProposalDescription"
  ): TypedContractMethod<
    [proposalId: BigNumberish, description: string, updateMessage: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProposalTransactions"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      updateMessage: string,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "veto"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vetoer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voteSnapshotBlockSwitchProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawDAONounsFromEscrow"
  ): TypedContractMethod<
    [tokenIds: BigNumberish[], to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFromForkEscrow"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;

  getEvent(
    key: "DAOWithdrawNounsFromEscrow"
  ): TypedContractEvent<
    DAOWithdrawNounsFromEscrowEvent.InputTuple,
    DAOWithdrawNounsFromEscrowEvent.OutputTuple,
    DAOWithdrawNounsFromEscrowEvent.OutputObject
  >;
  getEvent(
    key: "ERC20TokensToIncludeInForkSet"
  ): TypedContractEvent<
    ERC20TokensToIncludeInForkSetEvent.InputTuple,
    ERC20TokensToIncludeInForkSetEvent.OutputTuple,
    ERC20TokensToIncludeInForkSetEvent.OutputObject
  >;
  getEvent(
    key: "EscrowedToFork"
  ): TypedContractEvent<
    EscrowedToForkEvent.InputTuple,
    EscrowedToForkEvent.OutputTuple,
    EscrowedToForkEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteFork"
  ): TypedContractEvent<
    ExecuteForkEvent.InputTuple,
    ExecuteForkEvent.OutputTuple,
    ExecuteForkEvent.OutputObject
  >;
  getEvent(
    key: "ForkDAODeployerSet"
  ): TypedContractEvent<
    ForkDAODeployerSetEvent.InputTuple,
    ForkDAODeployerSetEvent.OutputTuple,
    ForkDAODeployerSetEvent.OutputObject
  >;
  getEvent(
    key: "ForkPeriodSet"
  ): TypedContractEvent<
    ForkPeriodSetEvent.InputTuple,
    ForkPeriodSetEvent.OutputTuple,
    ForkPeriodSetEvent.OutputObject
  >;
  getEvent(
    key: "ForkThresholdSet"
  ): TypedContractEvent<
    ForkThresholdSetEvent.InputTuple,
    ForkThresholdSetEvent.OutputTuple,
    ForkThresholdSetEvent.OutputObject
  >;
  getEvent(
    key: "JoinFork"
  ): TypedContractEvent<
    JoinForkEvent.InputTuple,
    JoinForkEvent.OutputTuple,
    JoinForkEvent.OutputObject
  >;
  getEvent(
    key: "LastMinuteWindowSet"
  ): TypedContractEvent<
    LastMinuteWindowSetEvent.InputTuple,
    LastMinuteWindowSetEvent.OutputTuple,
    LastMinuteWindowSetEvent.OutputObject
  >;
  getEvent(
    key: "MaxQuorumVotesBPSSet"
  ): TypedContractEvent<
    MaxQuorumVotesBPSSetEvent.InputTuple,
    MaxQuorumVotesBPSSetEvent.OutputTuple,
    MaxQuorumVotesBPSSetEvent.OutputObject
  >;
  getEvent(
    key: "MinQuorumVotesBPSSet"
  ): TypedContractEvent<
    MinQuorumVotesBPSSetEvent.InputTuple,
    MinQuorumVotesBPSSetEvent.OutputTuple,
    MinQuorumVotesBPSSetEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewImplementation"
  ): TypedContractEvent<
    NewImplementationEvent.InputTuple,
    NewImplementationEvent.OutputTuple,
    NewImplementationEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingVetoer"
  ): TypedContractEvent<
    NewPendingVetoerEvent.InputTuple,
    NewPendingVetoerEvent.OutputTuple,
    NewPendingVetoerEvent.OutputObject
  >;
  getEvent(
    key: "NewVetoer"
  ): TypedContractEvent<
    NewVetoerEvent.InputTuple,
    NewVetoerEvent.OutputTuple,
    NewVetoerEvent.OutputObject
  >;
  getEvent(
    key: "ObjectionPeriodDurationSet"
  ): TypedContractEvent<
    ObjectionPeriodDurationSetEvent.InputTuple,
    ObjectionPeriodDurationSetEvent.OutputTuple,
    ObjectionPeriodDurationSetEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCanceled"
  ): TypedContractEvent<
    ProposalCanceledEvent.InputTuple,
    ProposalCanceledEvent.OutputTuple,
    ProposalCanceledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreatedOnTimelockV1"
  ): TypedContractEvent<
    ProposalCreatedOnTimelockV1Event.InputTuple,
    ProposalCreatedOnTimelockV1Event.OutputTuple,
    ProposalCreatedOnTimelockV1Event.OutputObject
  >;
  getEvent(
    key: "ProposalCreatedWithRequirements(uint256,address,address[],address[],uint256[],string[],bytes[],uint256,uint256,uint256,uint256,uint256,string)"
  ): TypedContractEvent<
    ProposalCreatedWithRequirements_uint256_address_address_array_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_uint256_string_Event.InputTuple,
    ProposalCreatedWithRequirements_uint256_address_address_array_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_uint256_string_Event.OutputTuple,
    ProposalCreatedWithRequirements_uint256_address_address_array_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_uint256_string_Event.OutputObject
  >;
  getEvent(
    key: "ProposalCreatedWithRequirements(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,uint256,uint256,string)"
  ): TypedContractEvent<
    ProposalCreatedWithRequirements_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_string_Event.InputTuple,
    ProposalCreatedWithRequirements_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_string_Event.OutputTuple,
    ProposalCreatedWithRequirements_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_string_Event.OutputObject
  >;
  getEvent(
    key: "ProposalDescriptionUpdated"
  ): TypedContractEvent<
    ProposalDescriptionUpdatedEvent.InputTuple,
    ProposalDescriptionUpdatedEvent.OutputTuple,
    ProposalDescriptionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalObjectionPeriodSet"
  ): TypedContractEvent<
    ProposalObjectionPeriodSetEvent.InputTuple,
    ProposalObjectionPeriodSetEvent.OutputTuple,
    ProposalObjectionPeriodSetEvent.OutputObject
  >;
  getEvent(
    key: "ProposalQueued"
  ): TypedContractEvent<
    ProposalQueuedEvent.InputTuple,
    ProposalQueuedEvent.OutputTuple,
    ProposalQueuedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalThresholdBPSSet"
  ): TypedContractEvent<
    ProposalThresholdBPSSetEvent.InputTuple,
    ProposalThresholdBPSSetEvent.OutputTuple,
    ProposalThresholdBPSSetEvent.OutputObject
  >;
  getEvent(
    key: "ProposalTransactionsUpdated"
  ): TypedContractEvent<
    ProposalTransactionsUpdatedEvent.InputTuple,
    ProposalTransactionsUpdatedEvent.OutputTuple,
    ProposalTransactionsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalUpdatablePeriodSet"
  ): TypedContractEvent<
    ProposalUpdatablePeriodSetEvent.InputTuple,
    ProposalUpdatablePeriodSetEvent.OutputTuple,
    ProposalUpdatablePeriodSetEvent.OutputObject
  >;
  getEvent(
    key: "ProposalUpdated"
  ): TypedContractEvent<
    ProposalUpdatedEvent.InputTuple,
    ProposalUpdatedEvent.OutputTuple,
    ProposalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalVetoed"
  ): TypedContractEvent<
    ProposalVetoedEvent.InputTuple,
    ProposalVetoedEvent.OutputTuple,
    ProposalVetoedEvent.OutputObject
  >;
  getEvent(
    key: "QuorumCoefficientSet"
  ): TypedContractEvent<
    QuorumCoefficientSetEvent.InputTuple,
    QuorumCoefficientSetEvent.OutputTuple,
    QuorumCoefficientSetEvent.OutputObject
  >;
  getEvent(
    key: "QuorumVotesBPSSet"
  ): TypedContractEvent<
    QuorumVotesBPSSetEvent.InputTuple,
    QuorumVotesBPSSetEvent.OutputTuple,
    QuorumVotesBPSSetEvent.OutputObject
  >;
  getEvent(
    key: "RefundableVote"
  ): TypedContractEvent<
    RefundableVoteEvent.InputTuple,
    RefundableVoteEvent.OutputTuple,
    RefundableVoteEvent.OutputObject
  >;
  getEvent(
    key: "SignatureCancelled"
  ): TypedContractEvent<
    SignatureCancelledEvent.InputTuple,
    SignatureCancelledEvent.OutputTuple,
    SignatureCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TimelocksAndAdminSet"
  ): TypedContractEvent<
    TimelocksAndAdminSetEvent.InputTuple,
    TimelocksAndAdminSetEvent.OutputTuple,
    TimelocksAndAdminSetEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteSnapshotBlockSwitchProposalIdSet"
  ): TypedContractEvent<
    VoteSnapshotBlockSwitchProposalIdSetEvent.InputTuple,
    VoteSnapshotBlockSwitchProposalIdSetEvent.OutputTuple,
    VoteSnapshotBlockSwitchProposalIdSetEvent.OutputObject
  >;
  getEvent(
    key: "VotingDelaySet"
  ): TypedContractEvent<
    VotingDelaySetEvent.InputTuple,
    VotingDelaySetEvent.OutputTuple,
    VotingDelaySetEvent.OutputObject
  >;
  getEvent(
    key: "VotingPeriodSet"
  ): TypedContractEvent<
    VotingPeriodSetEvent.InputTuple,
    VotingPeriodSetEvent.OutputTuple,
    VotingPeriodSetEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFromForkEscrow"
  ): TypedContractEvent<
    WithdrawFromForkEscrowEvent.InputTuple,
    WithdrawFromForkEscrowEvent.OutputTuple,
    WithdrawFromForkEscrowEvent.OutputObject
  >;

  filters: {
    "DAOWithdrawNounsFromEscrow(uint256[],address)": TypedContractEvent<
      DAOWithdrawNounsFromEscrowEvent.InputTuple,
      DAOWithdrawNounsFromEscrowEvent.OutputTuple,
      DAOWithdrawNounsFromEscrowEvent.OutputObject
    >;
    DAOWithdrawNounsFromEscrow: TypedContractEvent<
      DAOWithdrawNounsFromEscrowEvent.InputTuple,
      DAOWithdrawNounsFromEscrowEvent.OutputTuple,
      DAOWithdrawNounsFromEscrowEvent.OutputObject
    >;

    "ERC20TokensToIncludeInForkSet(address[],address[])": TypedContractEvent<
      ERC20TokensToIncludeInForkSetEvent.InputTuple,
      ERC20TokensToIncludeInForkSetEvent.OutputTuple,
      ERC20TokensToIncludeInForkSetEvent.OutputObject
    >;
    ERC20TokensToIncludeInForkSet: TypedContractEvent<
      ERC20TokensToIncludeInForkSetEvent.InputTuple,
      ERC20TokensToIncludeInForkSetEvent.OutputTuple,
      ERC20TokensToIncludeInForkSetEvent.OutputObject
    >;

    "EscrowedToFork(uint32,address,uint256[],uint256[],string)": TypedContractEvent<
      EscrowedToForkEvent.InputTuple,
      EscrowedToForkEvent.OutputTuple,
      EscrowedToForkEvent.OutputObject
    >;
    EscrowedToFork: TypedContractEvent<
      EscrowedToForkEvent.InputTuple,
      EscrowedToForkEvent.OutputTuple,
      EscrowedToForkEvent.OutputObject
    >;

    "ExecuteFork(uint32,address,address,uint256,uint256)": TypedContractEvent<
      ExecuteForkEvent.InputTuple,
      ExecuteForkEvent.OutputTuple,
      ExecuteForkEvent.OutputObject
    >;
    ExecuteFork: TypedContractEvent<
      ExecuteForkEvent.InputTuple,
      ExecuteForkEvent.OutputTuple,
      ExecuteForkEvent.OutputObject
    >;

    "ForkDAODeployerSet(address,address)": TypedContractEvent<
      ForkDAODeployerSetEvent.InputTuple,
      ForkDAODeployerSetEvent.OutputTuple,
      ForkDAODeployerSetEvent.OutputObject
    >;
    ForkDAODeployerSet: TypedContractEvent<
      ForkDAODeployerSetEvent.InputTuple,
      ForkDAODeployerSetEvent.OutputTuple,
      ForkDAODeployerSetEvent.OutputObject
    >;

    "ForkPeriodSet(uint256,uint256)": TypedContractEvent<
      ForkPeriodSetEvent.InputTuple,
      ForkPeriodSetEvent.OutputTuple,
      ForkPeriodSetEvent.OutputObject
    >;
    ForkPeriodSet: TypedContractEvent<
      ForkPeriodSetEvent.InputTuple,
      ForkPeriodSetEvent.OutputTuple,
      ForkPeriodSetEvent.OutputObject
    >;

    "ForkThresholdSet(uint256,uint256)": TypedContractEvent<
      ForkThresholdSetEvent.InputTuple,
      ForkThresholdSetEvent.OutputTuple,
      ForkThresholdSetEvent.OutputObject
    >;
    ForkThresholdSet: TypedContractEvent<
      ForkThresholdSetEvent.InputTuple,
      ForkThresholdSetEvent.OutputTuple,
      ForkThresholdSetEvent.OutputObject
    >;

    "JoinFork(uint32,address,uint256[],uint256[],string)": TypedContractEvent<
      JoinForkEvent.InputTuple,
      JoinForkEvent.OutputTuple,
      JoinForkEvent.OutputObject
    >;
    JoinFork: TypedContractEvent<
      JoinForkEvent.InputTuple,
      JoinForkEvent.OutputTuple,
      JoinForkEvent.OutputObject
    >;

    "LastMinuteWindowSet(uint32,uint32)": TypedContractEvent<
      LastMinuteWindowSetEvent.InputTuple,
      LastMinuteWindowSetEvent.OutputTuple,
      LastMinuteWindowSetEvent.OutputObject
    >;
    LastMinuteWindowSet: TypedContractEvent<
      LastMinuteWindowSetEvent.InputTuple,
      LastMinuteWindowSetEvent.OutputTuple,
      LastMinuteWindowSetEvent.OutputObject
    >;

    "MaxQuorumVotesBPSSet(uint16,uint16)": TypedContractEvent<
      MaxQuorumVotesBPSSetEvent.InputTuple,
      MaxQuorumVotesBPSSetEvent.OutputTuple,
      MaxQuorumVotesBPSSetEvent.OutputObject
    >;
    MaxQuorumVotesBPSSet: TypedContractEvent<
      MaxQuorumVotesBPSSetEvent.InputTuple,
      MaxQuorumVotesBPSSetEvent.OutputTuple,
      MaxQuorumVotesBPSSetEvent.OutputObject
    >;

    "MinQuorumVotesBPSSet(uint16,uint16)": TypedContractEvent<
      MinQuorumVotesBPSSetEvent.InputTuple,
      MinQuorumVotesBPSSetEvent.OutputTuple,
      MinQuorumVotesBPSSetEvent.OutputObject
    >;
    MinQuorumVotesBPSSet: TypedContractEvent<
      MinQuorumVotesBPSSetEvent.InputTuple,
      MinQuorumVotesBPSSetEvent.OutputTuple,
      MinQuorumVotesBPSSetEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewImplementation(address,address)": TypedContractEvent<
      NewImplementationEvent.InputTuple,
      NewImplementationEvent.OutputTuple,
      NewImplementationEvent.OutputObject
    >;
    NewImplementation: TypedContractEvent<
      NewImplementationEvent.InputTuple,
      NewImplementationEvent.OutputTuple,
      NewImplementationEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "NewPendingVetoer(address,address)": TypedContractEvent<
      NewPendingVetoerEvent.InputTuple,
      NewPendingVetoerEvent.OutputTuple,
      NewPendingVetoerEvent.OutputObject
    >;
    NewPendingVetoer: TypedContractEvent<
      NewPendingVetoerEvent.InputTuple,
      NewPendingVetoerEvent.OutputTuple,
      NewPendingVetoerEvent.OutputObject
    >;

    "NewVetoer(address,address)": TypedContractEvent<
      NewVetoerEvent.InputTuple,
      NewVetoerEvent.OutputTuple,
      NewVetoerEvent.OutputObject
    >;
    NewVetoer: TypedContractEvent<
      NewVetoerEvent.InputTuple,
      NewVetoerEvent.OutputTuple,
      NewVetoerEvent.OutputObject
    >;

    "ObjectionPeriodDurationSet(uint32,uint32)": TypedContractEvent<
      ObjectionPeriodDurationSetEvent.InputTuple,
      ObjectionPeriodDurationSetEvent.OutputTuple,
      ObjectionPeriodDurationSetEvent.OutputObject
    >;
    ObjectionPeriodDurationSet: TypedContractEvent<
      ObjectionPeriodDurationSetEvent.InputTuple,
      ObjectionPeriodDurationSetEvent.OutputTuple,
      ObjectionPeriodDurationSetEvent.OutputObject
    >;

    "ProposalCanceled(uint256)": TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;
    ProposalCanceled: TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalCreatedOnTimelockV1(uint256)": TypedContractEvent<
      ProposalCreatedOnTimelockV1Event.InputTuple,
      ProposalCreatedOnTimelockV1Event.OutputTuple,
      ProposalCreatedOnTimelockV1Event.OutputObject
    >;
    ProposalCreatedOnTimelockV1: TypedContractEvent<
      ProposalCreatedOnTimelockV1Event.InputTuple,
      ProposalCreatedOnTimelockV1Event.OutputTuple,
      ProposalCreatedOnTimelockV1Event.OutputObject
    >;

    "ProposalCreatedWithRequirements(uint256,address,address[],address[],uint256[],string[],bytes[],uint256,uint256,uint256,uint256,uint256,string)": TypedContractEvent<
      ProposalCreatedWithRequirements_uint256_address_address_array_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_uint256_string_Event.InputTuple,
      ProposalCreatedWithRequirements_uint256_address_address_array_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_uint256_string_Event.OutputTuple,
      ProposalCreatedWithRequirements_uint256_address_address_array_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_uint256_string_Event.OutputObject
    >;
    "ProposalCreatedWithRequirements(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,uint256,uint256,string)": TypedContractEvent<
      ProposalCreatedWithRequirements_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_string_Event.InputTuple,
      ProposalCreatedWithRequirements_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_string_Event.OutputTuple,
      ProposalCreatedWithRequirements_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_uint256_uint256_string_Event.OutputObject
    >;

    "ProposalDescriptionUpdated(uint256,address,string,string)": TypedContractEvent<
      ProposalDescriptionUpdatedEvent.InputTuple,
      ProposalDescriptionUpdatedEvent.OutputTuple,
      ProposalDescriptionUpdatedEvent.OutputObject
    >;
    ProposalDescriptionUpdated: TypedContractEvent<
      ProposalDescriptionUpdatedEvent.InputTuple,
      ProposalDescriptionUpdatedEvent.OutputTuple,
      ProposalDescriptionUpdatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ProposalObjectionPeriodSet(uint256,uint256)": TypedContractEvent<
      ProposalObjectionPeriodSetEvent.InputTuple,
      ProposalObjectionPeriodSetEvent.OutputTuple,
      ProposalObjectionPeriodSetEvent.OutputObject
    >;
    ProposalObjectionPeriodSet: TypedContractEvent<
      ProposalObjectionPeriodSetEvent.InputTuple,
      ProposalObjectionPeriodSetEvent.OutputTuple,
      ProposalObjectionPeriodSetEvent.OutputObject
    >;

    "ProposalQueued(uint256,uint256)": TypedContractEvent<
      ProposalQueuedEvent.InputTuple,
      ProposalQueuedEvent.OutputTuple,
      ProposalQueuedEvent.OutputObject
    >;
    ProposalQueued: TypedContractEvent<
      ProposalQueuedEvent.InputTuple,
      ProposalQueuedEvent.OutputTuple,
      ProposalQueuedEvent.OutputObject
    >;

    "ProposalThresholdBPSSet(uint256,uint256)": TypedContractEvent<
      ProposalThresholdBPSSetEvent.InputTuple,
      ProposalThresholdBPSSetEvent.OutputTuple,
      ProposalThresholdBPSSetEvent.OutputObject
    >;
    ProposalThresholdBPSSet: TypedContractEvent<
      ProposalThresholdBPSSetEvent.InputTuple,
      ProposalThresholdBPSSetEvent.OutputTuple,
      ProposalThresholdBPSSetEvent.OutputObject
    >;

    "ProposalTransactionsUpdated(uint256,address,address[],uint256[],string[],bytes[],string)": TypedContractEvent<
      ProposalTransactionsUpdatedEvent.InputTuple,
      ProposalTransactionsUpdatedEvent.OutputTuple,
      ProposalTransactionsUpdatedEvent.OutputObject
    >;
    ProposalTransactionsUpdated: TypedContractEvent<
      ProposalTransactionsUpdatedEvent.InputTuple,
      ProposalTransactionsUpdatedEvent.OutputTuple,
      ProposalTransactionsUpdatedEvent.OutputObject
    >;

    "ProposalUpdatablePeriodSet(uint32,uint32)": TypedContractEvent<
      ProposalUpdatablePeriodSetEvent.InputTuple,
      ProposalUpdatablePeriodSetEvent.OutputTuple,
      ProposalUpdatablePeriodSetEvent.OutputObject
    >;
    ProposalUpdatablePeriodSet: TypedContractEvent<
      ProposalUpdatablePeriodSetEvent.InputTuple,
      ProposalUpdatablePeriodSetEvent.OutputTuple,
      ProposalUpdatablePeriodSetEvent.OutputObject
    >;

    "ProposalUpdated(uint256,address,address[],uint256[],string[],bytes[],string,string)": TypedContractEvent<
      ProposalUpdatedEvent.InputTuple,
      ProposalUpdatedEvent.OutputTuple,
      ProposalUpdatedEvent.OutputObject
    >;
    ProposalUpdated: TypedContractEvent<
      ProposalUpdatedEvent.InputTuple,
      ProposalUpdatedEvent.OutputTuple,
      ProposalUpdatedEvent.OutputObject
    >;

    "ProposalVetoed(uint256)": TypedContractEvent<
      ProposalVetoedEvent.InputTuple,
      ProposalVetoedEvent.OutputTuple,
      ProposalVetoedEvent.OutputObject
    >;
    ProposalVetoed: TypedContractEvent<
      ProposalVetoedEvent.InputTuple,
      ProposalVetoedEvent.OutputTuple,
      ProposalVetoedEvent.OutputObject
    >;

    "QuorumCoefficientSet(uint32,uint32)": TypedContractEvent<
      QuorumCoefficientSetEvent.InputTuple,
      QuorumCoefficientSetEvent.OutputTuple,
      QuorumCoefficientSetEvent.OutputObject
    >;
    QuorumCoefficientSet: TypedContractEvent<
      QuorumCoefficientSetEvent.InputTuple,
      QuorumCoefficientSetEvent.OutputTuple,
      QuorumCoefficientSetEvent.OutputObject
    >;

    "QuorumVotesBPSSet(uint256,uint256)": TypedContractEvent<
      QuorumVotesBPSSetEvent.InputTuple,
      QuorumVotesBPSSetEvent.OutputTuple,
      QuorumVotesBPSSetEvent.OutputObject
    >;
    QuorumVotesBPSSet: TypedContractEvent<
      QuorumVotesBPSSetEvent.InputTuple,
      QuorumVotesBPSSetEvent.OutputTuple,
      QuorumVotesBPSSetEvent.OutputObject
    >;

    "RefundableVote(address,uint256,bool)": TypedContractEvent<
      RefundableVoteEvent.InputTuple,
      RefundableVoteEvent.OutputTuple,
      RefundableVoteEvent.OutputObject
    >;
    RefundableVote: TypedContractEvent<
      RefundableVoteEvent.InputTuple,
      RefundableVoteEvent.OutputTuple,
      RefundableVoteEvent.OutputObject
    >;

    "SignatureCancelled(address,bytes)": TypedContractEvent<
      SignatureCancelledEvent.InputTuple,
      SignatureCancelledEvent.OutputTuple,
      SignatureCancelledEvent.OutputObject
    >;
    SignatureCancelled: TypedContractEvent<
      SignatureCancelledEvent.InputTuple,
      SignatureCancelledEvent.OutputTuple,
      SignatureCancelledEvent.OutputObject
    >;

    "TimelocksAndAdminSet(address,address,address)": TypedContractEvent<
      TimelocksAndAdminSetEvent.InputTuple,
      TimelocksAndAdminSetEvent.OutputTuple,
      TimelocksAndAdminSetEvent.OutputObject
    >;
    TimelocksAndAdminSet: TypedContractEvent<
      TimelocksAndAdminSetEvent.InputTuple,
      TimelocksAndAdminSetEvent.OutputTuple,
      TimelocksAndAdminSetEvent.OutputObject
    >;

    "VoteCast(address,uint256,uint8,uint256,string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteSnapshotBlockSwitchProposalIdSet(uint256,uint256)": TypedContractEvent<
      VoteSnapshotBlockSwitchProposalIdSetEvent.InputTuple,
      VoteSnapshotBlockSwitchProposalIdSetEvent.OutputTuple,
      VoteSnapshotBlockSwitchProposalIdSetEvent.OutputObject
    >;
    VoteSnapshotBlockSwitchProposalIdSet: TypedContractEvent<
      VoteSnapshotBlockSwitchProposalIdSetEvent.InputTuple,
      VoteSnapshotBlockSwitchProposalIdSetEvent.OutputTuple,
      VoteSnapshotBlockSwitchProposalIdSetEvent.OutputObject
    >;

    "VotingDelaySet(uint256,uint256)": TypedContractEvent<
      VotingDelaySetEvent.InputTuple,
      VotingDelaySetEvent.OutputTuple,
      VotingDelaySetEvent.OutputObject
    >;
    VotingDelaySet: TypedContractEvent<
      VotingDelaySetEvent.InputTuple,
      VotingDelaySetEvent.OutputTuple,
      VotingDelaySetEvent.OutputObject
    >;

    "VotingPeriodSet(uint256,uint256)": TypedContractEvent<
      VotingPeriodSetEvent.InputTuple,
      VotingPeriodSetEvent.OutputTuple,
      VotingPeriodSetEvent.OutputObject
    >;
    VotingPeriodSet: TypedContractEvent<
      VotingPeriodSetEvent.InputTuple,
      VotingPeriodSetEvent.OutputTuple,
      VotingPeriodSetEvent.OutputObject
    >;

    "Withdraw(uint256,bool)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawFromForkEscrow(uint32,address,uint256[])": TypedContractEvent<
      WithdrawFromForkEscrowEvent.InputTuple,
      WithdrawFromForkEscrowEvent.OutputTuple,
      WithdrawFromForkEscrowEvent.OutputObject
    >;
    WithdrawFromForkEscrow: TypedContractEvent<
      WithdrawFromForkEscrowEvent.InputTuple,
      WithdrawFromForkEscrowEvent.OutputTuple,
      WithdrawFromForkEscrowEvent.OutputObject
    >;
  };
}
