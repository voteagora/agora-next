/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ApprovalVotingModule,
  ApprovalVotingModuleInterface,
} from "../ApprovalVotingModule";

const _abi = [
  {
    inputs: [],
    name: "AlreadyVoted",
    type: "error",
  },
  {
    inputs: [],
    name: "BudgetExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "ExistingProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidParams",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxApprovalsExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxChoicesExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "NotGovernor",
    type: "error",
  },
  {
    inputs: [],
    name: "OptionsNotStrictlyAscending",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongProposalId",
    type: "error",
  },
  {
    inputs: [],
    name: "COUNTING_MODE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "PROPOSAL_DATA_ENCODING",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "VOTE_PARAMS_ENCODING",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "proposalData",
        type: "bytes",
      },
    ],
    name: "_afterExecute",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "support",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "_countVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "proposalData",
        type: "bytes",
      },
    ],
    name: "_formatExecuteParams",
    outputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes[]",
        name: "calldatas",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "_voteSucceeded",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountTotalVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountVotes",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "address",
        name: "governor",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "initBalance",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "maxApprovals",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "criteria",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "budgetToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "criteriaValue",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "budgetAmount",
            type: "uint128",
          },
        ],
        internalType: "struct ProposalSettings",
        name: "settings",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "proposalData",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "descriptionHash",
        type: "bytes32",
      },
    ],
    name: "propose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

export class ApprovalVotingModule__factory {
  static readonly abi = _abi;
  static createInterface(): ApprovalVotingModuleInterface {
    return new Interface(_abi) as ApprovalVotingModuleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ApprovalVotingModule {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ApprovalVotingModule;
  }
}
