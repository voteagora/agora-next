/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OptimismGovernorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALLIGATOR"
      | "BALLOT_TYPEHASH"
      | "COUNTING_MODE"
      | "EXTENDED_BALLOT_TYPEHASH"
      | "PERCENT_DIVISOR"
      | "PROPOSAL_TYPES_CONFIGURATOR"
      | "VERSION"
      | "VOTABLE_SUPPLY_ORACLE"
      | "approvedModules"
      | "cancel"
      | "cancelWithModule"
      | "castVote"
      | "castVoteBySig"
      | "castVoteFromAlligator"
      | "castVoteWithReason"
      | "castVoteWithReasonAndParams"
      | "castVoteWithReasonAndParamsBySig"
      | "editProposalType"
      | "execute"
      | "executeWithModule"
      | "getVotes"
      | "getVotesWithParams"
      | "hasVoted"
      | "hashProposal"
      | "hashProposalWithModule"
      | "increaseWeightCast"
      | "manager"
      | "name"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "proposalDeadline"
      | "proposalSnapshot"
      | "proposalThreshold"
      | "proposalVotes"
      | "propose(address[],uint256[],bytes[],string)"
      | "propose(address[],uint256[],bytes[],string,uint8)"
      | "proposeWithModule(address,bytes,string)"
      | "proposeWithModule(address,bytes,string,uint8)"
      | "quorum"
      | "quorumDenominator"
      | "quorumNumerator(uint256)"
      | "quorumNumerator()"
      | "relay"
      | "setModuleApproval"
      | "setProposalDeadline"
      | "setProposalThreshold"
      | "setVotingDelay"
      | "setVotingPeriod"
      | "state"
      | "supportsInterface"
      | "token"
      | "token_unused"
      | "updateQuorumNumerator"
      | "version"
      | "votableSupply()"
      | "votableSupply(uint256)"
      | "votingDelay"
      | "votingPeriod"
      | "weightCast"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "ProposalCanceled"
      | "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string,uint8)"
      | "ProposalCreated(uint256,address,address,bytes,uint256,uint256,string,uint8)"
      | "ProposalCreated(uint256,address,address,bytes,uint256,uint256,string)"
      | "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"
      | "ProposalDeadlineUpdated"
      | "ProposalExecuted"
      | "ProposalThresholdSet"
      | "ProposalTypeUpdated"
      | "QuorumNumeratorUpdated"
      | "VoteCast"
      | "VoteCastWithParams"
      | "VotingDelaySet"
      | "VotingPeriodSet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ALLIGATOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COUNTING_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXTENDED_BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_TYPES_CONFIGURATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VOTABLE_SUPPLY_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedModules",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithModule",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteFromAlligator",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParams",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParamsBySig",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editProposalType",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithModule",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesWithParams",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposalWithModule",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseWeightCast",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose(address[],uint256[],bytes[],string)",
    values: [AddressLike[], BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "propose(address[],uint256[],bytes[],string,uint8)",
    values: [AddressLike[], BigNumberish[], BytesLike[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeWithModule(address,bytes,string)",
    values: [AddressLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeWithModule(address,bytes,string,uint8)",
    values: [AddressLike, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumNumerator(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumNumerator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relay",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setModuleApproval",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalDeadline",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token_unused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuorumNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votableSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votableSupply(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightCast",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ALLIGATOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COUNTING_MODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXTENDED_BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_TYPES_CONFIGURATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VOTABLE_SUPPLY_ORACLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteFromAlligator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParamsBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editProposalType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWithModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotesWithParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashProposalWithModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseWeightCast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propose(address[],uint256[],bytes[],string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propose(address[],uint256[],bytes[],string,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeWithModule(address,bytes,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeWithModule(address,bytes,string,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumNumerator(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumNumerator()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setModuleApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "token_unused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuorumNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votableSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votableSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weightCast", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCanceledEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_uint8_Event {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    description: string,
    proposalType: BigNumberish,
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    startBlock: bigint,
    endBlock: bigint,
    description: string,
    proposalType: bigint,
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    startBlock: bigint;
    endBlock: bigint;
    description: string;
    proposalType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_uint8_Event {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    votingModule: AddressLike,
    proposalData: BytesLike,
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    description: string,
    proposalType: BigNumberish,
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    votingModule: string,
    proposalData: string,
    startBlock: bigint,
    endBlock: bigint,
    description: string,
    proposalType: bigint,
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    votingModule: string;
    proposalData: string;
    startBlock: bigint;
    endBlock: bigint;
    description: string;
    proposalType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_Event {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    votingModule: AddressLike,
    proposalData: BytesLike,
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    description: string,
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    votingModule: string,
    proposalData: string,
    startBlock: bigint,
    endBlock: bigint,
    description: string,
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    votingModule: string;
    proposalData: string;
    startBlock: bigint;
    endBlock: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    description: string,
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    startBlock: bigint,
    endBlock: bigint,
    description: string,
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    startBlock: bigint;
    endBlock: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalDeadlineUpdatedEvent {
  export type InputTuple = [proposalId: BigNumberish, deadline: BigNumberish];
  export type OutputTuple = [proposalId: bigint, deadline: bigint];
  export interface OutputObject {
    proposalId: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalThresholdSetEvent {
  export type InputTuple = [
    oldProposalThreshold: BigNumberish,
    newProposalThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    oldProposalThreshold: bigint,
    newProposalThreshold: bigint,
  ];
  export interface OutputObject {
    oldProposalThreshold: bigint;
    newProposalThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalTypeUpdatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposalType: BigNumberish,
  ];
  export type OutputTuple = [proposalId: bigint, proposalType: bigint];
  export interface OutputObject {
    proposalId: bigint;
    proposalType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumNumeratorUpdatedEvent {
  export type InputTuple = [
    oldQuorumNumerator: BigNumberish,
    newQuorumNumerator: BigNumberish,
  ];
  export type OutputTuple = [
    oldQuorumNumerator: bigint,
    newQuorumNumerator: bigint,
  ];
  export interface OutputObject {
    oldQuorumNumerator: bigint;
    newQuorumNumerator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: BigNumberish,
    weight: BigNumberish,
    reason: string,
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: bigint,
    weight: bigint,
    reason: string,
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: bigint;
    weight: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastWithParamsEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: BigNumberish,
    weight: BigNumberish,
    reason: string,
    params: BytesLike,
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: bigint,
    weight: bigint,
    reason: string,
    params: string,
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: bigint;
    weight: bigint;
    reason: string;
    params: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingDelaySetEvent {
  export type InputTuple = [
    oldVotingDelay: BigNumberish,
    newVotingDelay: BigNumberish,
  ];
  export type OutputTuple = [oldVotingDelay: bigint, newVotingDelay: bigint];
  export interface OutputObject {
    oldVotingDelay: bigint;
    newVotingDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPeriodSetEvent {
  export type InputTuple = [
    oldVotingPeriod: BigNumberish,
    newVotingPeriod: BigNumberish,
  ];
  export type OutputTuple = [oldVotingPeriod: bigint, newVotingPeriod: bigint];
  export interface OutputObject {
    oldVotingPeriod: bigint;
    newVotingPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OptimismGovernor extends BaseContract {
  connect(runner?: ContractRunner | null): OptimismGovernor;
  waitForDeployment(): Promise<this>;

  interface: OptimismGovernorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALLIGATOR: TypedContractMethod<[], [string], "view">;

  BALLOT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  COUNTING_MODE: TypedContractMethod<[], [string], "view">;

  EXTENDED_BALLOT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  PERCENT_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  PROPOSAL_TYPES_CONFIGURATOR: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  VOTABLE_SUPPLY_ORACLE: TypedContractMethod<[], [string], "view">;

  approvedModules: TypedContractMethod<
    [module: AddressLike],
    [boolean],
    "view"
  >;

  cancel: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  cancelWithModule: TypedContractMethod<
    [module: AddressLike, proposalData: BytesLike, descriptionHash: BytesLike],
    [bigint],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  castVoteBySig: TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  castVoteFromAlligator: TypedContractMethod<
    [
      proposalId: BigNumberish,
      voter: AddressLike,
      support: BigNumberish,
      reason: string,
      votes: BigNumberish,
      params: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  castVoteWithReason: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;

  castVoteWithReasonAndParams: TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  castVoteWithReasonAndParamsBySig: TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  editProposalType: TypedContractMethod<
    [proposalId: BigNumberish, proposalType: BigNumberish],
    [void],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  executeWithModule: TypedContractMethod<
    [module: AddressLike, proposalData: BytesLike, descriptionHash: BytesLike],
    [bigint],
    "payable"
  >;

  getVotes: TypedContractMethod<
    [account: AddressLike, blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  getVotesWithParams: TypedContractMethod<
    [account: AddressLike, blockNumber: BigNumberish, params: BytesLike],
    [bigint],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  hashProposal: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike,
    ],
    [bigint],
    "view"
  >;

  hashProposalWithModule: TypedContractMethod<
    [module: AddressLike, proposalData: BytesLike, descriptionHash: BytesLike],
    [bigint],
    "view"
  >;

  increaseWeightCast: TypedContractMethod<
    [
      proposalId: BigNumberish,
      account: AddressLike,
      votes: BigNumberish,
      accountVotes: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  manager: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
    ],
    [string],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  proposalDeadline: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  proposalSnapshot: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  proposalThreshold: TypedContractMethod<[], [bigint], "view">;

  proposalVotes: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        againstVotes: bigint;
        forVotes: bigint;
        abstainVotes: bigint;
      },
    ],
    "view"
  >;

  "propose(address[],uint256[],bytes[],string)": TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
    ],
    [bigint],
    "nonpayable"
  >;

  "propose(address[],uint256[],bytes[],string,uint8)": TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      proposalType: BigNumberish,
    ],
    [bigint],
    "nonpayable"
  >;

  "proposeWithModule(address,bytes,string)": TypedContractMethod<
    [module: AddressLike, proposalData: BytesLike, description: string],
    [bigint],
    "nonpayable"
  >;

  "proposeWithModule(address,bytes,string,uint8)": TypedContractMethod<
    [
      module: AddressLike,
      proposalData: BytesLike,
      description: string,
      proposalType: BigNumberish,
    ],
    [bigint],
    "nonpayable"
  >;

  quorum: TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  quorumDenominator: TypedContractMethod<[], [bigint], "view">;

  "quorumNumerator(uint256)": TypedContractMethod<
    [blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  "quorumNumerator()": TypedContractMethod<[], [bigint], "view">;

  relay: TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;

  setModuleApproval: TypedContractMethod<
    [module: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setProposalDeadline: TypedContractMethod<
    [proposalId: BigNumberish, deadline: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProposalThreshold: TypedContractMethod<
    [newProposalThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVotingDelay: TypedContractMethod<
    [newVotingDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVotingPeriod: TypedContractMethod<
    [newVotingPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  state: TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  token_unused: TypedContractMethod<[], [string], "view">;

  updateQuorumNumerator: TypedContractMethod<
    [newQuorumNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  "votableSupply()": TypedContractMethod<[], [bigint], "view">;

  "votableSupply(uint256)": TypedContractMethod<
    [blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  votingDelay: TypedContractMethod<[], [bigint], "view">;

  votingPeriod: TypedContractMethod<[], [bigint], "view">;

  weightCast: TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALLIGATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COUNTING_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EXTENDED_BALLOT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENT_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROPOSAL_TYPES_CONFIGURATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTABLE_SUPPLY_ORACLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approvedModules"
  ): TypedContractMethod<[module: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelWithModule"
  ): TypedContractMethod<
    [module: AddressLike, proposalData: BytesLike, descriptionHash: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteBySig"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteFromAlligator"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      voter: AddressLike,
      support: BigNumberish,
      reason: string,
      votes: BigNumberish,
      params: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReason"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParams"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParamsBySig"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "editProposalType"
  ): TypedContractMethod<
    [proposalId: BigNumberish, proposalType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeWithModule"
  ): TypedContractMethod<
    [module: AddressLike, proposalData: BytesLike, descriptionHash: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<
    [account: AddressLike, blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotesWithParams"
  ): TypedContractMethod<
    [account: AddressLike, blockNumber: BigNumberish, params: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashProposal"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike,
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashProposalWithModule"
  ): TypedContractMethod<
    [module: AddressLike, proposalData: BytesLike, descriptionHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseWeightCast"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      account: AddressLike,
      votes: BigNumberish,
      accountVotes: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposalDeadline"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalSnapshot"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "proposalVotes"): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        againstVotes: bigint;
        forVotes: bigint;
        abstainVotes: bigint;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose(address[],uint256[],bytes[],string)"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "propose(address[],uint256[],bytes[],string,uint8)"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      proposalType: BigNumberish,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeWithModule(address,bytes,string)"
  ): TypedContractMethod<
    [module: AddressLike, proposalData: BytesLike, description: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeWithModule(address,bytes,string,uint8)"
  ): TypedContractMethod<
    [
      module: AddressLike,
      proposalData: BytesLike,
      description: string,
      proposalType: BigNumberish,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quorum"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quorumDenominator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quorumNumerator(uint256)"
  ): TypedContractMethod<[blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quorumNumerator()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "relay"
  ): TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setModuleApproval"
  ): TypedContractMethod<
    [module: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposalDeadline"
  ): TypedContractMethod<
    [proposalId: BigNumberish, deadline: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposalThreshold"
  ): TypedContractMethod<
    [newProposalThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVotingDelay"
  ): TypedContractMethod<[newVotingDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotingPeriod"
  ): TypedContractMethod<[newVotingPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token_unused"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateQuorumNumerator"
  ): TypedContractMethod<
    [newQuorumNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "votableSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votableSupply(uint256)"
  ): TypedContractMethod<[blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "weightCast"
  ): TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCanceled"
  ): TypedContractEvent<
    ProposalCanceledEvent.InputTuple,
    ProposalCanceledEvent.OutputTuple,
    ProposalCanceledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string,uint8)"
  ): TypedContractEvent<
    ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_uint8_Event.InputTuple,
    ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_uint8_Event.OutputTuple,
    ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_uint8_Event.OutputObject
  >;
  getEvent(
    key: "ProposalCreated(uint256,address,address,bytes,uint256,uint256,string,uint8)"
  ): TypedContractEvent<
    ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_uint8_Event.InputTuple,
    ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_uint8_Event.OutputTuple,
    ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_uint8_Event.OutputObject
  >;
  getEvent(
    key: "ProposalCreated(uint256,address,address,bytes,uint256,uint256,string)"
  ): TypedContractEvent<
    ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_Event.InputTuple,
    ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_Event.OutputTuple,
    ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_Event.OutputObject
  >;
  getEvent(
    key: "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"
  ): TypedContractEvent<
    ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event.InputTuple,
    ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event.OutputTuple,
    ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event.OutputObject
  >;
  getEvent(
    key: "ProposalDeadlineUpdated"
  ): TypedContractEvent<
    ProposalDeadlineUpdatedEvent.InputTuple,
    ProposalDeadlineUpdatedEvent.OutputTuple,
    ProposalDeadlineUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalThresholdSet"
  ): TypedContractEvent<
    ProposalThresholdSetEvent.InputTuple,
    ProposalThresholdSetEvent.OutputTuple,
    ProposalThresholdSetEvent.OutputObject
  >;
  getEvent(
    key: "ProposalTypeUpdated"
  ): TypedContractEvent<
    ProposalTypeUpdatedEvent.InputTuple,
    ProposalTypeUpdatedEvent.OutputTuple,
    ProposalTypeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "QuorumNumeratorUpdated"
  ): TypedContractEvent<
    QuorumNumeratorUpdatedEvent.InputTuple,
    QuorumNumeratorUpdatedEvent.OutputTuple,
    QuorumNumeratorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteCastWithParams"
  ): TypedContractEvent<
    VoteCastWithParamsEvent.InputTuple,
    VoteCastWithParamsEvent.OutputTuple,
    VoteCastWithParamsEvent.OutputObject
  >;
  getEvent(
    key: "VotingDelaySet"
  ): TypedContractEvent<
    VotingDelaySetEvent.InputTuple,
    VotingDelaySetEvent.OutputTuple,
    VotingDelaySetEvent.OutputObject
  >;
  getEvent(
    key: "VotingPeriodSet"
  ): TypedContractEvent<
    VotingPeriodSetEvent.InputTuple,
    VotingPeriodSetEvent.OutputTuple,
    VotingPeriodSetEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ProposalCanceled(uint256)": TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;
    ProposalCanceled: TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string,uint8)": TypedContractEvent<
      ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_uint8_Event.InputTuple,
      ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_uint8_Event.OutputTuple,
      ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_uint8_Event.OutputObject
    >;
    "ProposalCreated(uint256,address,address,bytes,uint256,uint256,string,uint8)": TypedContractEvent<
      ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_uint8_Event.InputTuple,
      ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_uint8_Event.OutputTuple,
      ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_uint8_Event.OutputObject
    >;
    "ProposalCreated(uint256,address,address,bytes,uint256,uint256,string)": TypedContractEvent<
      ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_Event.InputTuple,
      ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_Event.OutputTuple,
      ProposalCreated_uint256_address_address_bytes_uint256_uint256_string_Event.OutputObject
    >;
    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": TypedContractEvent<
      ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event.InputTuple,
      ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event.OutputTuple,
      ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event.OutputObject
    >;

    "ProposalDeadlineUpdated(uint256,uint64)": TypedContractEvent<
      ProposalDeadlineUpdatedEvent.InputTuple,
      ProposalDeadlineUpdatedEvent.OutputTuple,
      ProposalDeadlineUpdatedEvent.OutputObject
    >;
    ProposalDeadlineUpdated: TypedContractEvent<
      ProposalDeadlineUpdatedEvent.InputTuple,
      ProposalDeadlineUpdatedEvent.OutputTuple,
      ProposalDeadlineUpdatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ProposalThresholdSet(uint256,uint256)": TypedContractEvent<
      ProposalThresholdSetEvent.InputTuple,
      ProposalThresholdSetEvent.OutputTuple,
      ProposalThresholdSetEvent.OutputObject
    >;
    ProposalThresholdSet: TypedContractEvent<
      ProposalThresholdSetEvent.InputTuple,
      ProposalThresholdSetEvent.OutputTuple,
      ProposalThresholdSetEvent.OutputObject
    >;

    "ProposalTypeUpdated(uint256,uint8)": TypedContractEvent<
      ProposalTypeUpdatedEvent.InputTuple,
      ProposalTypeUpdatedEvent.OutputTuple,
      ProposalTypeUpdatedEvent.OutputObject
    >;
    ProposalTypeUpdated: TypedContractEvent<
      ProposalTypeUpdatedEvent.InputTuple,
      ProposalTypeUpdatedEvent.OutputTuple,
      ProposalTypeUpdatedEvent.OutputObject
    >;

    "QuorumNumeratorUpdated(uint256,uint256)": TypedContractEvent<
      QuorumNumeratorUpdatedEvent.InputTuple,
      QuorumNumeratorUpdatedEvent.OutputTuple,
      QuorumNumeratorUpdatedEvent.OutputObject
    >;
    QuorumNumeratorUpdated: TypedContractEvent<
      QuorumNumeratorUpdatedEvent.InputTuple,
      QuorumNumeratorUpdatedEvent.OutputTuple,
      QuorumNumeratorUpdatedEvent.OutputObject
    >;

    "VoteCast(address,uint256,uint8,uint256,string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)": TypedContractEvent<
      VoteCastWithParamsEvent.InputTuple,
      VoteCastWithParamsEvent.OutputTuple,
      VoteCastWithParamsEvent.OutputObject
    >;
    VoteCastWithParams: TypedContractEvent<
      VoteCastWithParamsEvent.InputTuple,
      VoteCastWithParamsEvent.OutputTuple,
      VoteCastWithParamsEvent.OutputObject
    >;

    "VotingDelaySet(uint256,uint256)": TypedContractEvent<
      VotingDelaySetEvent.InputTuple,
      VotingDelaySetEvent.OutputTuple,
      VotingDelaySetEvent.OutputObject
    >;
    VotingDelaySet: TypedContractEvent<
      VotingDelaySetEvent.InputTuple,
      VotingDelaySetEvent.OutputTuple,
      VotingDelaySetEvent.OutputObject
    >;

    "VotingPeriodSet(uint256,uint256)": TypedContractEvent<
      VotingPeriodSetEvent.InputTuple,
      VotingPeriodSetEvent.OutputTuple,
      VotingPeriodSetEvent.OutputObject
    >;
    VotingPeriodSet: TypedContractEvent<
      VotingPeriodSetEvent.InputTuple,
      VotingPeriodSetEvent.OutputTuple,
      VotingPeriodSetEvent.OutputObject
    >;
  };
}
