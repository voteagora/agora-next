/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type SubdelegationRulesStruct = {
  maxRedelegations: BigNumberish;
  blocksBeforeVoteCloses: BigNumberish;
  notValidBefore: BigNumberish;
  notValidAfter: BigNumberish;
  customRule: AddressLike;
  allowanceType: BigNumberish;
  allowance: BigNumberish;
};

export type SubdelegationRulesStructOutput = [
  maxRedelegations: bigint,
  blocksBeforeVoteCloses: bigint,
  notValidBefore: bigint,
  notValidAfter: bigint,
  customRule: string,
  allowanceType: bigint,
  allowance: bigint,
] & {
  maxRedelegations: bigint;
  blocksBeforeVoteCloses: bigint;
  notValidBefore: bigint;
  notValidAfter: bigint;
  customRule: string;
  allowanceType: bigint;
  allowance: bigint;
};

export interface AlligatorOPV5Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "BALLOT_TYPEHASH"
      | "BALLOT_WITHPARAMS_BATCHED_TYPEHASH"
      | "BALLOT_WITHPARAMS_TYPEHASH"
      | "DOMAIN_TYPEHASH"
      | "GOVERNOR"
      | "OP_TOKEN"
      | "_togglePause"
      | "castVote"
      | "castVoteBySig"
      | "castVoteWithReason"
      | "castVoteWithReasonAndParams"
      | "castVoteWithReasonAndParamsBatched"
      | "castVoteWithReasonAndParamsBySig"
      | "initialize"
      | "limitedCastVoteWithReasonAndParamsBatched"
      | "limitedCastVoteWithReasonAndParamsBatchedBySig"
      | "owner"
      | "paused"
      | "proxiableUUID"
      | "proxyAddress"
      | "renounceOwnership"
      | "subdelegate"
      | "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256)[])"
      | "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256))"
      | "subdelegations"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "votesCast"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "SubDelegation"
      | "SubDelegations(address,address[],tuple)"
      | "SubDelegations(address,address[],tuple[])"
      | "Unpaused"
      | "Upgraded"
      | "VoteCast"
      | "VotesCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_WITHPARAMS_BATCHED_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_WITHPARAMS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GOVERNOR", values?: undefined): string;
  encodeFunctionData(functionFragment: "OP_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_togglePause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [AddressLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [
      AddressLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason",
    values: [AddressLike[], BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParams",
    values: [AddressLike[], BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParamsBatched",
    values: [AddressLike[][], BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParamsBySig",
    values: [
      AddressLike[],
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "limitedCastVoteWithReasonAndParamsBatched",
    values: [
      BigNumberish,
      AddressLike[][],
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "limitedCastVoteWithReasonAndParamsBatchedBySig",
    values: [
      BigNumberish,
      AddressLike[][],
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subdelegate",
    values: [AddressLike, SubdelegationRulesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256)[])",
    values: [AddressLike[], SubdelegationRulesStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256))",
    values: [AddressLike[], SubdelegationRulesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "subdelegations",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votesCast",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_WITHPARAMS_BATCHED_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_WITHPARAMS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GOVERNOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OP_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_togglePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParamsBatched",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParamsBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitedCastVoteWithReasonAndParamsBatched",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitedCastVoteWithReasonAndParamsBatchedBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subdelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subdelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votesCast", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubDelegationEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    subdelegationRules: SubdelegationRulesStruct,
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    subdelegationRules: SubdelegationRulesStructOutput,
  ];
  export interface OutputObject {
    from: string;
    to: string;
    subdelegationRules: SubdelegationRulesStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubDelegations_address_address_array_tuple_Event {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike[],
    subdelegationRules: SubdelegationRulesStruct,
  ];
  export type OutputTuple = [
    from: string,
    to: string[],
    subdelegationRules: SubdelegationRulesStructOutput,
  ];
  export interface OutputObject {
    from: string;
    to: string[];
    subdelegationRules: SubdelegationRulesStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubDelegations_address_address_array_tuple_array_Event {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike[],
    subdelegationRules: SubdelegationRulesStruct[],
  ];
  export type OutputTuple = [
    from: string,
    to: string[],
    subdelegationRules: SubdelegationRulesStructOutput[],
  ];
  export interface OutputObject {
    from: string;
    to: string[];
    subdelegationRules: SubdelegationRulesStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proxy: AddressLike,
    voter: AddressLike,
    authority: AddressLike[],
    proposalId: BigNumberish,
    support: BigNumberish,
  ];
  export type OutputTuple = [
    proxy: string,
    voter: string,
    authority: string[],
    proposalId: bigint,
    support: bigint,
  ];
  export interface OutputObject {
    proxy: string;
    voter: string;
    authority: string[];
    proposalId: bigint;
    support: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotesCastEvent {
  export type InputTuple = [
    proxies: AddressLike[],
    voter: AddressLike,
    authorities: AddressLike[][],
    proposalId: BigNumberish,
    support: BigNumberish,
  ];
  export type OutputTuple = [
    proxies: string[],
    voter: string,
    authorities: string[][],
    proposalId: bigint,
    support: bigint,
  ];
  export interface OutputObject {
    proxies: string[];
    voter: string;
    authorities: string[][];
    proposalId: bigint;
    support: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AlligatorOPV5 extends BaseContract {
  connect(runner?: ContractRunner | null): AlligatorOPV5;
  waitForDeployment(): Promise<this>;

  interface: AlligatorOPV5Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BALLOT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  BALLOT_WITHPARAMS_BATCHED_TYPEHASH: TypedContractMethod<[], [string], "view">;

  BALLOT_WITHPARAMS_TYPEHASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_TYPEHASH: TypedContractMethod<[], [string], "view">;

  GOVERNOR: TypedContractMethod<[], [string], "view">;

  OP_TOKEN: TypedContractMethod<[], [string], "view">;

  _togglePause: TypedContractMethod<[], [void], "nonpayable">;

  castVote: TypedContractMethod<
    [authority: AddressLike[], proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;

  castVoteBySig: TypedContractMethod<
    [
      authority: AddressLike[],
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  castVoteWithReason: TypedContractMethod<
    [
      authority: AddressLike[],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
    ],
    [void],
    "nonpayable"
  >;

  castVoteWithReasonAndParams: TypedContractMethod<
    [
      authority: AddressLike[],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  castVoteWithReasonAndParamsBatched: TypedContractMethod<
    [
      authorities: AddressLike[][],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  castVoteWithReasonAndParamsBySig: TypedContractMethod<
    [
      authority: AddressLike[],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_initOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  limitedCastVoteWithReasonAndParamsBatched: TypedContractMethod<
    [
      maxVotingPower: BigNumberish,
      authorities: AddressLike[][],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  limitedCastVoteWithReasonAndParamsBatchedBySig: TypedContractMethod<
    [
      maxVotingPower: BigNumberish,
      authorities: AddressLike[][],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  proxyAddress: TypedContractMethod<
    [proxyOwner: AddressLike],
    [string],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  subdelegate: TypedContractMethod<
    [to: AddressLike, subdelegationRules: SubdelegationRulesStruct],
    [void],
    "nonpayable"
  >;

  "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256)[])": TypedContractMethod<
    [targets: AddressLike[], subdelegationRules: SubdelegationRulesStruct[]],
    [void],
    "nonpayable"
  >;

  "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256))": TypedContractMethod<
    [targets: AddressLike[], subdelegationRules: SubdelegationRulesStruct],
    [void],
    "nonpayable"
  >;

  subdelegations: TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [
      [bigint, bigint, bigint, bigint, string, bigint, bigint] & {
        maxRedelegations: bigint;
        blocksBeforeVoteCloses: bigint;
        notValidBefore: bigint;
        notValidAfter: bigint;
        customRule: string;
        allowanceType: bigint;
        allowance: bigint;
      },
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  votesCast: TypedContractMethod<
    [proxy: AddressLike, proposalId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BALLOT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOT_WITHPARAMS_BATCHED_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOT_WITHPARAMS_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GOVERNOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OP_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_togglePause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [authority: AddressLike[], proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteBySig"
  ): TypedContractMethod<
    [
      authority: AddressLike[],
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReason"
  ): TypedContractMethod<
    [
      authority: AddressLike[],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParams"
  ): TypedContractMethod<
    [
      authority: AddressLike[],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParamsBatched"
  ): TypedContractMethod<
    [
      authorities: AddressLike[][],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParamsBySig"
  ): TypedContractMethod<
    [
      authority: AddressLike[],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_initOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "limitedCastVoteWithReasonAndParamsBatched"
  ): TypedContractMethod<
    [
      maxVotingPower: BigNumberish,
      authorities: AddressLike[][],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "limitedCastVoteWithReasonAndParamsBatchedBySig"
  ): TypedContractMethod<
    [
      maxVotingPower: BigNumberish,
      authorities: AddressLike[][],
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      params: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxyAddress"
  ): TypedContractMethod<[proxyOwner: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subdelegate"
  ): TypedContractMethod<
    [to: AddressLike, subdelegationRules: SubdelegationRulesStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256)[])"
  ): TypedContractMethod<
    [targets: AddressLike[], subdelegationRules: SubdelegationRulesStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subdelegateBatched(address[],(uint8,uint16,uint32,uint32,address,uint8,uint256))"
  ): TypedContractMethod<
    [targets: AddressLike[], subdelegationRules: SubdelegationRulesStruct],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "subdelegations"): TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [
      [bigint, bigint, bigint, bigint, string, bigint, bigint] & {
        maxRedelegations: bigint;
        blocksBeforeVoteCloses: bigint;
        notValidBefore: bigint;
        notValidAfter: bigint;
        customRule: string;
        allowanceType: bigint;
        allowance: bigint;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "votesCast"
  ): TypedContractMethod<
    [proxy: AddressLike, proposalId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SubDelegation"
  ): TypedContractEvent<
    SubDelegationEvent.InputTuple,
    SubDelegationEvent.OutputTuple,
    SubDelegationEvent.OutputObject
  >;
  getEvent(
    key: "SubDelegations(address,address[],tuple)"
  ): TypedContractEvent<
    SubDelegations_address_address_array_tuple_Event.InputTuple,
    SubDelegations_address_address_array_tuple_Event.OutputTuple,
    SubDelegations_address_address_array_tuple_Event.OutputObject
  >;
  getEvent(
    key: "SubDelegations(address,address[],tuple[])"
  ): TypedContractEvent<
    SubDelegations_address_address_array_tuple_array_Event.InputTuple,
    SubDelegations_address_address_array_tuple_array_Event.OutputTuple,
    SubDelegations_address_address_array_tuple_array_Event.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotesCast"
  ): TypedContractEvent<
    VotesCastEvent.InputTuple,
    VotesCastEvent.OutputTuple,
    VotesCastEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SubDelegation(address,address,tuple)": TypedContractEvent<
      SubDelegationEvent.InputTuple,
      SubDelegationEvent.OutputTuple,
      SubDelegationEvent.OutputObject
    >;
    SubDelegation: TypedContractEvent<
      SubDelegationEvent.InputTuple,
      SubDelegationEvent.OutputTuple,
      SubDelegationEvent.OutputObject
    >;

    "SubDelegations(address,address[],tuple)": TypedContractEvent<
      SubDelegations_address_address_array_tuple_Event.InputTuple,
      SubDelegations_address_address_array_tuple_Event.OutputTuple,
      SubDelegations_address_address_array_tuple_Event.OutputObject
    >;
    "SubDelegations(address,address[],tuple[])": TypedContractEvent<
      SubDelegations_address_address_array_tuple_array_Event.InputTuple,
      SubDelegations_address_address_array_tuple_array_Event.OutputTuple,
      SubDelegations_address_address_array_tuple_array_Event.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VoteCast(address,address,address[],uint256,uint8)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotesCast(address[],address,address[][],uint256,uint8)": TypedContractEvent<
      VotesCastEvent.InputTuple,
      VotesCastEvent.OutputTuple,
      VotesCastEvent.OutputObject
    >;
    VotesCast: TypedContractEvent<
      VotesCastEvent.InputTuple,
      VotesCastEvent.OutputTuple,
      VotesCastEvent.OutputObject
    >;
  };
}
